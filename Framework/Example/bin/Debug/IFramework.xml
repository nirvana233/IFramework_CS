<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IFramework</name>
    </assembly>
    <members>
        <member name="T:IFramework.TipAttribute">
            <summary>
            小提示
            </summary>
        </member>
        <member name="M:IFramework.TipAttribute.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="description"></param>
        </member>
        <member name="P:IFramework.TipAttribute.description">
            <summary>
            描述
            </summary>
        </member>
        <member name="T:IFramework.BitConverterEx">
            <summary>
            byte[]转换
            </summary>
        </member>
        <member name="M:IFramework.BitConverterEx.BytesToHexString(System.Byte[],System.Boolean)">
            <summary>
            string
            </summary>
            <param name="bytes"></param>
            <param name="lower"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.HexStringToBytes(System.String)">
            <summary>
            byte[]
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.ToInt16(System.Byte[],System.Int32)">
            <summary>
            short
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.ToInt32(System.Byte[],System.Int32)">
            <summary>
            int
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.ToInt64(System.Byte[],System.Int32)">
            <summary>
            long
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            ushort
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            uint
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            ulong
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.ToSingle(System.Byte[],System.Int32)">
            <summary>
            float
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.ToDouble(System.Byte[],System.Int32)">
            <summary>
            double
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            ToDecimal
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.ToGuid(System.Byte[],System.Int32)">
            <summary>
            Guid
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.ToSByte(System.Byte[],System.Int32)">
            <summary>
            sbyte
            </summary>
            <param name="bytes"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            bool
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.ToChar(System.Byte[],System.Int32)">
            <summary>
            char
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.GetBytes(System.SByte)">
            <summary>
            byte[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.GetBytes(System.Char)">
            <summary>
            byte[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.GetBytes(System.Boolean)">
            <summary>
            byte[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.GetBytes(System.Int16)">
            <summary>
            byte[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.GetBytes(System.Int32)">
            <summary>
            byte[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.GetBytes(System.Int64)">
            <summary>
            byte[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.GetBytes(System.UInt16)">
            <summary>
            byte[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.GetBytes(System.UInt32)">
            <summary>
            byte[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.GetBytes(System.UInt64)">
            <summary>
            byte[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.GetBytes(System.Single)">
            <summary>
            byte[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.GetBytes(System.Double)">
            <summary>
            byte[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.GetBytes(System.Decimal)">
            <summary>
            byte[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BitConverterEx.GetBytes(System.Guid)">
            <summary>
            byte[]
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.IEnvironment">
            <summary>
            环境
            </summary>
        </member>
        <member name="P:IFramework.IEnvironment.container">
            <summary>
            数据容器
            </summary>
        </member>
        <member name="P:IFramework.IEnvironment.deltaTime">
            <summary>
            每次刷新的时间
            </summary>
        </member>
        <member name="P:IFramework.IEnvironment.envType">
            <summary>
            环境类型
            </summary>
        </member>
        <member name="P:IFramework.IEnvironment.inited">
            <summary>
            是否初始化完成
            </summary>
        </member>
        <member name="P:IFramework.IEnvironment.modules">
            <summary>
            模块容器
            </summary>
        </member>
        <member name="P:IFramework.IEnvironment.timeSinceInit">
            <summary>
            初始化-现在时间
            </summary>
        </member>
        <member name="M:IFramework.IEnvironment.BindDispose(System.Action)">
            <summary>
            绑定 Dispose
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.IEnvironment.BindUpdate(System.Action)">
            <summary>
            绑定 Update
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.IEnvironment.Init(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            初始化
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:IFramework.IEnvironment.InitWithAttribute">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:IFramework.IEnvironment.UnBindDispose(System.Action)">
            <summary>
            解绑 Dispose
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.IEnvironment.UnBindUpdate(System.Action)">
            <summary>
            解绑 Update
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.IEnvironment.Update">
            <summary>
            刷新
            </summary>
        </member>
        <member name="M:IFramework.IEnvironment.WaitEnvironmentFrame(System.Action)">
            <summary>
            等待环境刷新
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:IFramework.Injection.IValuesContainer">
            <summary>
            对象注入容器
            </summary>
        </member>
        <member name="M:IFramework.Injection.IValuesContainer.Subscribe``1(System.String)">
            <summary>
            注入类型
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="name"></param>
        </member>
        <member name="M:IFramework.Injection.IValuesContainer.Subscribe``2(System.String)">
            <summary>
            注入类型
            </summary>
            <typeparam name="BaseType"></typeparam>
            <typeparam name="Type"></typeparam>
            <param name="name"></param>
        </member>
        <member name="M:IFramework.Injection.IValuesContainer.Subscribe(System.Type,System.Type,System.String)">
            <summary>
            注入类型
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="name"></param>
        </member>
        <member name="M:IFramework.Injection.IValuesContainer.SubscribeInstance``1(``0,System.String,System.Boolean)">
            <summary>
            注入实例
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="inject"></param>
        </member>
        <member name="M:IFramework.Injection.IValuesContainer.SubscribeInstance(System.Type,System.Object,System.String,System.Boolean)">
            <summary>
            注入实例
            </summary>
            <param name="baseType"></param>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="inject"></param>
        </member>
        <member name="M:IFramework.Injection.IValuesContainer.GetValue``1(System.String,System.Object[])">
            <summary>
            获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Injection.IValuesContainer.GetValue(System.Type,System.String,System.Object[])">
            <summary>
            获取值
            </summary>
            <param name="baseType"></param>
            <param name="name"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Injection.IValuesContainer.GetValues(System.Type)">
            <summary>
            获取所有值
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Injection.IValuesContainer.GetValues``1">
            <summary>
            获取所有值
            </summary>
            <typeparam name="Type"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFramework.Injection.IValuesContainer.Inject(System.Object)">
            <summary>
            为一个对象注入数据
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:IFramework.Injection.IValuesContainer.InjectInstances">
            <summary>
            为所有容器内实例注入
            </summary>
        </member>
        <member name="M:IFramework.Injection.IValuesContainer.Clear">
            <summary>
            清除所有
            </summary>
        </member>
        <member name="T:IFramework.Injection.InjectAttribute">
            <summary>
            注入标记
            </summary>
        </member>
        <member name="P:IFramework.Injection.InjectAttribute.name">
            <summary>
            注入名
            </summary>
        </member>
        <member name="M:IFramework.Injection.InjectAttribute.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:IFramework.Modules.Message.IMessage">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:IFramework.Modules.Message.IMessage.subject">
            <summary>
            发送消息类型
            </summary>
        </member>
        <member name="P:IFramework.Modules.Message.IMessage.args">
            <summary>
            承载消息内容
            </summary>
        </member>
        <member name="P:IFramework.Modules.Message.IMessage.code">
            <summary>
            code,帮助区分 args
            </summary>
        </member>
        <member name="P:IFramework.Modules.Message.IMessage.state">
            <summary>
            消息状态
            </summary>
        </member>
        <member name="P:IFramework.Modules.Message.IMessage.errorCode">
            <summary>
            消息发送结果
            </summary>
        </member>
        <member name="P:IFramework.Modules.Message.IMessage.priority">
            <summary>
            优先级 
            仅在 state 为 MessageState.Wait时有效
            </summary>
        </member>
        <member name="P:IFramework.Modules.Message.IMessage.position">
            <summary>
            所在位置 
            仅在 state 为 MessageState.Wait时有效
            </summary>
        </member>
        <member name="M:IFramework.Modules.Message.IMessage.SetCode(System.Int32)">
            <summary>
            设置Code，
            仅在 state 为 MessageState.Wait时有效
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:IFramework.Modules.Message.IMessage.SetPriority(System.Int32)">
            <summary>
            设置优先级 
            仅在 state 为 MessageState.Wait时有效
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.IMessage.OnRecycle(System.Action{IFramework.Modules.Message.IMessage})">
            <summary>
            仅在 state 为 MessageState.Wait时有效
            实例被回收时的引用
            消息发布完成，回收时候触发
            回收后，此回调内部会制空，即只会触发一次
            如果缓存了引用，记得制空引用
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:IFramework.Modules.Message.MessageErrorCode">
            <summary>
            消息发送结果
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageErrorCode.None">
            <summary>
            无状态,即不在使用
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageErrorCode.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageErrorCode.NoneListen">
            <summary>
            无人监听
            </summary>
        </member>
        <member name="T:IFramework.Modules.Message.MessageModule">
            <summary>
            消息模块
            </summary>
        </member>
        <member name="P:IFramework.Modules.Message.MessageModule.count">
            <summary>
            剩余消息数目
            </summary>
        </member>
        <member name="P:IFramework.Modules.Message.MessageModule.fitSubType">
            <summary>
            适配子类型
            </summary>
        </member>
        <member name="P:IFramework.Modules.Message.MessageModule.processesPerFrame">
            <summary>
            每帧处理消息个数
            </summary>
        </member>
        <member name="M:IFramework.Modules.Message.MessageModule.Subscribe(System.Type,IFramework.Modules.Message.IMessageListener)">
            <summary>
            注册监听
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.MessageModule.Subscribe``1(IFramework.Modules.Message.IMessageListener)">
            <summary>
            注册监听
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.MessageModule.UnSubscribe(System.Type,IFramework.Modules.Message.IMessageListener)">
            <summary>
            解除注册监听
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.MessageModule.UnSubscribe``1(IFramework.Modules.Message.IMessageListener)">
            <summary>
            解除注册监听
            </summary>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.MessageModule.Subscribe(System.Type,IFramework.Modules.Message.MessageListener)">
            <summary>
            注册监听
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.MessageModule.Subscribe``1(IFramework.Modules.Message.MessageListener)">
            <summary>
            注册监听
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.MessageModule.UnSubscribe(System.Type,IFramework.Modules.Message.MessageListener)">
            <summary>
            解除注册监听
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.MessageModule.UnSubscribe``1(IFramework.Modules.Message.MessageListener)">
            <summary>
            解除注册监听
            </summary>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.MessageModule.Publish``1(IFramework.IEventArgs,IFramework.Modules.Message.MessageUrgencyType)">
            <summary>
            发布消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.MessageModule.Publish``1(``0,IFramework.IEventArgs,IFramework.Modules.Message.MessageUrgencyType)">
            <summary>
            发布消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="args"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.MessageModule.PublishByNumber``1(IFramework.IEventArgs,System.Int32)">
            <summary>
            发布消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.MessageModule.PublishByNumber``1(``0,IFramework.IEventArgs,System.Int32)">
            <summary>
            发布消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="args"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.MessageModule.Publish(System.Type,IFramework.IEventArgs,IFramework.Modules.Message.MessageUrgencyType)">
            <summary>
            发布消息
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.MessageModule.PublishByNumber(System.Type,IFramework.IEventArgs,System.Int32)">
            <summary>
            发布消息
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <param name="priority">越大处理越晚</param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.Message.MessageState">
            <summary>
            消息状态
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageState.Rest">
            <summary>
            休息
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageState.Wait">
            <summary>
            等待被发布
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageState.Lock">
            <summary>
            正在发布中
            </summary>
        </member>
        <member name="T:IFramework.Modules.Message.IMessageListener">
            <summary>
            消息监听者
            </summary>
        </member>
        <member name="M:IFramework.Modules.Message.IMessageListener.Listen(IFramework.Modules.Message.IMessage)">
            <summary>
            收到消息回调
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:IFramework.Modules.Message.IMessageModule">
            <summary>
            消息模块
            </summary>
        </member>
        <member name="P:IFramework.Modules.Message.IMessageModule.count">
            <summary>
            剩余消息数目
            </summary>
        </member>
        <member name="P:IFramework.Modules.Message.IMessageModule.fitSubType">
            <summary>
            适配子类型
            </summary>
        </member>
        <member name="P:IFramework.Modules.Message.IMessageModule.processesPerFrame">
            <summary>
            每一帧处理消息上限
            </summary>
        </member>
        <member name="M:IFramework.Modules.Message.IMessageModule.Publish(System.Type,IFramework.IEventArgs,IFramework.Modules.Message.MessageUrgencyType)">
            <summary>
            发布消息
            </summary>
            <param name="tyoe"></param>
            <param name="args"></param>
            <param name="priority"></param>
        </member>
        <member name="M:IFramework.Modules.Message.IMessageModule.Publish``1(IFramework.IEventArgs,IFramework.Modules.Message.MessageUrgencyType)">
            <summary>
            发布消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
            <param name="priority"></param>
        </member>
        <member name="M:IFramework.Modules.Message.IMessageModule.Publish``1(``0,IFramework.IEventArgs,IFramework.Modules.Message.MessageUrgencyType)">
            <summary>
            发布消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="args"></param>
            <param name="priority"></param>
        </member>
        <member name="M:IFramework.Modules.Message.IMessageModule.PublishByNumber``1(``0,IFramework.IEventArgs,System.Int32)">
            <summary>
            发布消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="args"></param>
            <param name="priority"></param>
        </member>
        <member name="M:IFramework.Modules.Message.IMessageModule.PublishByNumber``1(IFramework.IEventArgs,System.Int32)">
            <summary>
            发布消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
            <param name="priority"></param>
        </member>
        <member name="M:IFramework.Modules.Message.IMessageModule.PublishByNumber(System.Type,IFramework.IEventArgs,System.Int32)">
            <summary>
            发布消息
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <param name="priority"></param>
        </member>
        <member name="M:IFramework.Modules.Message.IMessageModule.Subscribe(System.Type,IFramework.Modules.Message.IMessageListener)">
            <summary>
            注册
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.IMessageModule.Subscribe(System.Type,IFramework.Modules.Message.MessageListener)">
            <summary>
            注册
            </summary>
            <param name="tyoe"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.IMessageModule.Subscribe``1(IFramework.Modules.Message.IMessageListener)">
            <summary>
            注册
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.IMessageModule.Subscribe``1(IFramework.Modules.Message.MessageListener)">
            <summary>
            注册
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.IMessageModule.UnSubscribe(System.Type,IFramework.Modules.Message.IMessageListener)">
            <summary>
            移除
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.IMessageModule.UnSubscribe(System.Type,IFramework.Modules.Message.MessageListener)">
            <summary>
            移除
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.IMessageModule.UnSubscribe``1(IFramework.Modules.Message.IMessageListener)">
            <summary>
            移除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Message.IMessageModule.UnSubscribe``1(IFramework.Modules.Message.MessageListener)">
            <summary>
            移除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.Message.MessageListener">
            <summary>
            消息监听
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:IFramework.Modules.Message.MessageUrgency">
            <summary>
            消息紧急程度
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageUrgency.Immediately">
            <summary>
            立刻
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageUrgency.VeryUrgent">
            <summary>
            非常紧急
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageUrgency.Urgent">
            <summary>
            紧急
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageUrgency.Important">
            <summary>
            重要的
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageUrgency.Common">
            <summary>
            普通的
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageUrgency.Unimportant">
            <summary>
            不重要的
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageUrgency.Dispensable">
            <summary>
            可有可无的
            </summary>
        </member>
        <member name="T:IFramework.Modules.Message.MessageUrgencyType">
            <summary>
            消息紧急程度
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageUrgencyType.Immediately">
            <summary>
            立刻
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageUrgencyType.VeryUrgent">
            <summary>
            非常紧急
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageUrgencyType.Urgent">
            <summary>
            紧急
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageUrgencyType.Important">
            <summary>
            重要的
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageUrgencyType.Common">
            <summary>
            普通的
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageUrgencyType.Unimportant">
            <summary>
            不重要的
            </summary>
        </member>
        <member name="F:IFramework.Modules.Message.MessageUrgencyType.Dispensable">
            <summary>
            可有可无的
            </summary>
        </member>
        <member name="T:IFramework.Modules.Recorder.ValueState`1">
            <summary>
            包含数值的状态
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.Modules.Recorder.ValueState`1.value">
            <summary>
            数值
            </summary>
        </member>
        <member name="T:IFramework.Modules.Recorder.ActionGroupState">
            <summary>
            回调组
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.ActionGroupState.OnRedo">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.ActionGroupState.OnUndo">
            <summary>
            撤回
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.ActionGroupState.OnReset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="T:IFramework.Modules.Recorder.ActionState">
            <summary>
            回调状态
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.ActionState.OnRedo">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.ActionState.OnUndo">
            <summary>
            撤回
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.ActionState.OnReset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="T:IFramework.Modules.Recorder.BaseState">
            <summary>
            状态基类
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.BaseState.OnRedo">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.BaseState.OnUndo">
            <summary>
            撤回
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.BaseState.OnReset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="T:IFramework.Modules.Recorder.CommandGroupState">
            <summary>
            命令组
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.CommandGroupState.OnRedo">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.CommandGroupState.OnUndo">
            <summary>
            撤回
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.CommandGroupState.OnReset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="T:IFramework.Modules.Recorder.CommandState">
            <summary>
            命令状态
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.CommandState.OnRedo">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.CommandState.OnUndo">
            <summary>
            撤回
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.CommandState.OnReset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="T:IFramework.Modules.Recorder.IOperationRecorderModule">
            <summary>
            操作记录
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.IOperationRecorderModule.Allocate``1">
            <summary>
            分配
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Recorder.IOperationRecorderModule.Redo">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Recorder.IOperationRecorderModule.Subscribe(IFramework.Modules.Recorder.BaseState,System.Boolean)">
            <summary>
            注册
            </summary>
            <param name="state"></param>
            <param name="redo"></param>
        </member>
        <member name="M:IFramework.Modules.Recorder.IOperationRecorderModule.Undo">
            <summary>
            撤回
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.Recorder.OperationRecorderModule">
            <summary>
            操作记录
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.OperationRecorderModule.Allocate``1">
            <summary>
            分配状态
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Recorder.OperationRecorderModule.Subscribe(IFramework.Modules.Recorder.BaseState,System.Boolean)">
            <summary>
            注册
            </summary>
            <param name="state"></param>
            <param name="redo"></param>
        </member>
        <member name="M:IFramework.Modules.Recorder.OperationRecorderModule.Undo">
            <summary>
            撤回
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Recorder.OperationRecorderModule.Redo">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.Recorder.OperationRecorderEx">
            <summary>
            扩展
            </summary>
        </member>
        <member name="M:IFramework.Modules.Recorder.OperationRecorderEx.AllocateCommand(IFramework.Modules.Recorder.IOperationRecorderModule)">
            <summary>
            分配命令
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Recorder.OperationRecorderEx.AllocateAction(IFramework.Modules.Recorder.IOperationRecorderModule)">
            <summary>
            分配回调
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Recorder.OperationRecorderEx.AllocateCommandGroup(IFramework.Modules.Recorder.IOperationRecorderModule)">
            <summary>
            分配命令组
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Recorder.OperationRecorderEx.AllocateActionGroup(IFramework.Modules.Recorder.IOperationRecorderModule)">
            <summary>
            分配回调组
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Recorder.OperationRecorderEx.SetCommand``1(``0,IFramework.ICommand,IFramework.ICommand)">
            <summary>
            设置值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="redo"></param>
            <param name="undo"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Recorder.OperationRecorderEx.SetGroupCommand``1(``0,IFramework.ICommand,IFramework.ICommand)">
            <summary>
            设置值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="redo"></param>
            <param name="undo"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Recorder.OperationRecorderEx.SetCommand``1(``0,System.Action,System.Action)">
            <summary>
            设置值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="redo"></param>
            <param name="undo"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Recorder.OperationRecorderEx.SetGroupCommand``1(``0,System.Action,System.Action)">
            <summary>
            设置值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="redo"></param>
            <param name="undo"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Recorder.OperationRecorderEx.Subscribe``1(``0,System.Boolean)">
            <summary>
            注册
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="redo"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.IFrameworkModuleContainer">
            <summary>
            模块容器
            </summary>
        </member>
        <member name="M:IFramework.Modules.IFrameworkModuleContainer.CreateModule(System.Type,System.String)">
            <summary>
            创建模块
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.IFrameworkModuleContainer.CreateModule``1(System.String)">
            <summary>
            创建模块
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.IFrameworkModuleContainer.GetModule(System.Type,System.String)">
            <summary>
            获取模块
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.IFrameworkModuleContainer.GetModule``1(System.String)">
            <summary>
            获取模块
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.IFrameworkModuleContainer.FindModule(System.Type,System.String)">
            <summary>
            查找模块
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.IFrameworkModuleContainer.FindModule``1(System.String)">
            <summary>
            查找模块
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.Config.ConfigModule">
            <summary>
            config 模块
            </summary>
        </member>
        <member name="M:IFramework.Modules.Config.ConfigModule.GetConfig``1(System.String)">
            <summary>
            获取数值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Config.ConfigModule.GetConfig(System.Type,System.String)">
            <summary>
            获取数值
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Config.ConfigModule.SetConfig(System.Type,System.Object,System.String)">
            <summary>
            设置值
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Config.ConfigModule.SetConfig``1(``0,System.String)">
            <summary>
            发布变化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Config.ConfigModule.BindConfig``1(System.Action{``0},System.Func{``0})">
            <summary>
            绑定 config 字段 绑定对象需要继承BindableObject
            </summary>
            <typeparam name="T"></typeparam>
            <param name="setter"></param>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.Config.IConfigModule">
            <summary>
            config 模块
            </summary>
        </member>
        <member name="M:IFramework.Modules.Config.IConfigModule.GetConfig(System.Type,System.String)">
            <summary>
            获取值
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Config.IConfigModule.GetConfig``1(System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Config.IConfigModule.SetConfig(System.Type,System.Object,System.String)">
            <summary>
            设置值
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Config.IConfigModule.SetConfig``1(``0,System.String)">
            <summary>
            设置值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Config.IConfigModule.BindConfig``1(System.Action{``0},System.Func{``0})">
            <summary>
            绑定 config 绑定对象需要继承BindableObject
            </summary>
            <typeparam name="T"></typeparam>
            <param name="setter"></param>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.FrameworkModules">
            <summary>
            框架提供的模块
            </summary>
        </member>
        <member name="T:IFramework.Modules.Coroutine.CoroutineModuleEx">
            <summary>
            协程模块扩展
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.CoroutineModuleEx.StartCoroutine(System.Object,System.Collections.IEnumerator,IFramework.EnvironmentType)">
            <summary>
            开启一个携程
            </summary>
            <param name="obj"></param>
            <param name=" envType"></param>
            <param name="routine">迭代器</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Coroutine.CoroutineModuleEx.StartCoroutine(System.Object,System.Collections.IEnumerator,IFramework.IEnvironment)">
            <summary>
            开启一个携程
            </summary>
            <param name="obj"></param>
            <param name="env"></param>
            <param name="routine">迭代器</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Coroutine.CoroutineModuleEx.OnCompelete(IFramework.Modules.Coroutine.ICoroutine,System.Action)">
            <summary>
            结束回调
            </summary>
            <param name="self"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.Coroutine.ICoroutine">
            <summary>
            协程实体
            </summary>
        </member>
        <member name="P:IFramework.Modules.Coroutine.ICoroutine.isDone">
            <summary>
            是否结束
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.ICoroutine.Compelete">
            <summary>
            手动结束
            </summary>
        </member>
        <member name="T:IFramework.Modules.Coroutine.ICoroutineModule">
            <summary>
            协程模块
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.ICoroutineModule.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            开启一个协程
            </summary>
            <param name="routine"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.Coroutine.Coroutine">
            <summary>
            携程 模拟
            </summary>
        </member>
        <member name="P:IFramework.Modules.Coroutine.Coroutine.isDone">
            <summary>
            是否完成
            </summary>
        </member>
        <member name="E:IFramework.Modules.Coroutine.Coroutine.onCompelete">
            <summary>
            携程完成时候回调
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.Coroutine.Compelete">
            <summary>
            手动结束携程
            </summary>
        </member>
        <member name="T:IFramework.Modules.Coroutine.CoroutineInstruction">
            <summary>
            所有等待类的基类
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.CoroutineInstruction.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.CoroutineInstruction.InnerLogoc">
            <summary>
            等待逻辑，返回 True 结束
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.Coroutine.CoroutineModule">
            <summary>
            携程模块
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.CoroutineModule.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            开启一个携程
            </summary>
            <param name="routine"></param>
            <returns></returns>
        </member>
        <member name="P:IFramework.Modules.Coroutine.CoroutineModule.priority">
            <summary>
            优先级
            </summary>
        </member>
        <member name="T:IFramework.Modules.Coroutine.WaitForDays">
            <summary>
            等待日子
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.WaitForDays.#ctor(System.Double)">
            <summary>
            Ctor
            </summary>
            <param name="days">天数</param>
        </member>
        <member name="T:IFramework.Modules.Coroutine.WaitForFrame">
            <summary>
            等一帧
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.WaitForFrame.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:IFramework.Modules.Coroutine.WaitForFrames">
            <summary>
            等待帧数
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.WaitForFrames.#ctor(System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="count">帧数 </param>
        </member>
        <member name="M:IFramework.Modules.Coroutine.WaitForFrames.InnerLogoc">
            <summary>
            override
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.Coroutine.WaitForHours">
            <summary>
            等待小时
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.WaitForHours.#ctor(System.Double)">
            <summary>
            Ctor
            </summary>
            <param name="hours">小时</param>
        </member>
        <member name="T:IFramework.Modules.Coroutine.WaitForMilliseconds">
            <summary>
            等待毫秒
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.WaitForMilliseconds.#ctor(System.Double)">
            <summary>
            Ctor
            </summary>
            <param name="milliseconds">毫秒</param>
        </member>
        <member name="T:IFramework.Modules.Coroutine.WaitForMinutes">
            <summary>
            等待分钟
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.WaitForMinutes.#ctor(System.Double)">
            <summary>
            Ctor
            </summary>
            <param name="minutes">等待分钟数</param>
        </member>
        <member name="T:IFramework.Modules.Coroutine.WaitForSeconds">
            <summary>
            等待秒
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.WaitForSeconds.#ctor(System.Double)">
            <summary>
            Ctor
            </summary>
            <param name="seconds">等待秒数</param>
        </member>
        <member name="T:IFramework.Modules.Coroutine.WaitForTicks">
            <summary>
            等待trick
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.WaitForTicks.#ctor(System.Int64)">
            <summary>
            Ctor
            </summary>
            <param name="ticks">等待帧数</param>
        </member>
        <member name="T:IFramework.Modules.Coroutine.WaitForTimeSpan">
            <summary>
            等待时间
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.WaitForTimeSpan.#ctor(System.TimeSpan)">
            <summary>
            Ctor
            </summary>
            <param name="span"> 等待时间</param>
        </member>
        <member name="M:IFramework.Modules.Coroutine.WaitForTimeSpan.InnerLogoc">
            <summary>
            override
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.Coroutine.WaitUtil">
            <summary>
            等待条件成立
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.WaitUtil.#ctor(System.Func{System.Boolean})">
            <summary>
            Ctor
            </summary>
            <param name="condition">等待成立条件</param>
        </member>
        <member name="M:IFramework.Modules.Coroutine.WaitUtil.InnerLogoc">
            <summary>
            override
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.Coroutine.WaitWhile">
            <summary>
            等待条件不成立
            </summary>
        </member>
        <member name="M:IFramework.Modules.Coroutine.WaitWhile.#ctor(System.Func{System.Boolean})">
            <summary>
            Ctor
            </summary>
            <param name="condition">等待不成立条件</param>
        </member>
        <member name="M:IFramework.Modules.Coroutine.WaitWhile.InnerLogoc">
            <summary>
            override
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.ECS.IECSModule">
            <summary>
            Ecs模块
            </summary>
        </member>
        <member name="M:IFramework.Modules.ECS.IECSModule.CreateEntity``1">
            <summary>
            创建实体
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.IECSModule.GetEntitys">
            <summary>
            获取实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.IECSModule.SubscribeEntity``1(``0)">
            <summary>
            注册实体
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.IECSModule.UnSubscribeEntity(IFramework.Modules.ECS.IEntity)">
            <summary>
            移除实体
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.IECSModule.AddComponent(IFramework.Modules.ECS.IEntity,IFramework.Modules.ECS.IComponent,System.Boolean)">
            <summary>
            添加组件
            </summary>
            <param name="entity"></param>
            <param name="component"></param>
            <param name="useSame"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.IECSModule.AddComponent(IFramework.Modules.ECS.IEntity,System.Type)">
            <summary>
            添加组件
            </summary>
            <param name="entity"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.IECSModule.GetComponent(IFramework.Modules.ECS.IEntity,System.Type)">
            <summary>
            获取组件
            </summary>
            <param name="entity"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.IECSModule.ReFreshComponent(IFramework.Modules.ECS.IEntity,System.Type,IFramework.Modules.ECS.IComponent)">
            <summary>
            刷新组件
            </summary>
            <param name="entity"></param>
            <param name="type"></param>
            <param name="component"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.IECSModule.RemoveComponent(IFramework.Modules.ECS.IEntity,System.Type)">
            <summary>
            移除组件
            </summary>
            <param name="entity"></param>
            <param name="type"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.IECSModule.SubscribeSystem(IFramework.Modules.ECS.IExcuteSystem)">
            <summary>
            注册系统
            </summary>
            <param name="system"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.IECSModule.UnSubscribeSystem(IFramework.Modules.ECS.IExcuteSystem)">
            <summary>
            移除系统
            </summary>
            <param name="system"></param>
        </member>
        <member name="T:IFramework.Modules.ECS.IEntity">
            <summary>
            实体
            </summary>
        </member>
        <member name="P:IFramework.Modules.ECS.IEntity.mou">
            <summary>
            注册的模块
            </summary>
        </member>
        <member name="M:IFramework.Modules.ECS.IEntity.GetComponent(System.Type)">
            <summary>
            获取组件
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.IEntity.GetComponent``1">
            <summary>
            湖区组件
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.IEntity.AddComponent(System.Type)">
            <summary>
            添加组件
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.IEntity.AddComponent``1">
            <summary>
            添加组件
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.IEntity.AddComponent(IFramework.Modules.ECS.IComponent,System.Boolean)">
            <summary>
            添加组件
            </summary>
            <param name="component"></param>
            <param name="useSame"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.IEntity.AddComponent``1(``0,System.Boolean)">
            <summary>
            添加组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="component"></param>
            <param name="useSame"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.IEntity.RemoveComponent(System.Type)">
            <summary>
            移除组件
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.IEntity.RemoveComponent``1">
            <summary>
            移除组件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IFramework.Modules.ECS.IEntity.ContainsComponent(System.Type)">
            <summary>
            是否包含组件
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.IEntity.ContainsComponent``1">
            <summary>
            是否包含组件
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.IEntity.ReFreshComponent(System.Type,IFramework.Modules.ECS.IComponent)">
            <summary>
            直接替换原组件，结构体必须使用这个方法刷新数据
            </summary>
            <param name="type"></param>
            <param name="component"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.IEntity.ReFreshComponent``1(``0)">
            <summary>
            直接替换原组件，结构体必须使用这个方法刷新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="component"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.IEntity.Destory">
            <summary>
            解除模块注册
            </summary>
        </member>
        <member name="T:IFramework.Modules.ECS.ECSModule">
            <summary>
            模仿Ecs结构
            </summary>
        </member>
        <member name="M:IFramework.Modules.ECS.ECSModule.CreateEntity``1">
            <summary>
            创建实体，创建完，注册
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.ECSModule.SubscribeEntity``1(``0)">
            <summary>
            注册实体
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.ECSModule.UnSubscribeEntity(IFramework.Modules.ECS.IEntity)">
            <summary>
            解除注册实体
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.ECSModule.GetEntitys">
            <summary>
            获取实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.ECSModule.AddComponent(IFramework.Modules.ECS.IEntity,System.Type)">
            <summary>
            添加组件
            </summary>
            <param name="entity"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.ECSModule.AddComponent(IFramework.Modules.ECS.IEntity,IFramework.Modules.ECS.IComponent,System.Boolean)">
            <summary>
            添加组件
            </summary>
            <param name="entity"></param>
            <param name="component"></param>
            <param name="useSame"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.ECSModule.ReFreshComponent(IFramework.Modules.ECS.IEntity,System.Type,IFramework.Modules.ECS.IComponent)">
            <summary>
            刷新组件
            </summary>
            <param name="entity"></param>
            <param name="type"></param>
            <param name="component"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.ECSModule.GetComponent(IFramework.Modules.ECS.IEntity,System.Type)">
            <summary>
            获取组件
            </summary>
            <param name="entity"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.ECSModule.RemoveComponent(IFramework.Modules.ECS.IEntity,System.Type)">
            <summary>
            移除组件
            </summary>
            <param name="entity"></param>
            <param name="type"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.ECSModule.SubscribeSystem(IFramework.Modules.ECS.IExcuteSystem)">
            <summary>
            注册系统
            </summary>
            <param name="system"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.ECSModule.UnSubscribeSystem(IFramework.Modules.ECS.IExcuteSystem)">
            <summary>
            解除注册系统
            </summary>
            <param name="system"></param>
        </member>
        <member name="T:IFramework.Modules.ECS.Entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="P:IFramework.Modules.ECS.Entity.mou">
            <summary>
            注册的模块
            </summary>
        </member>
        <member name="M:IFramework.Modules.ECS.Entity.GetComponent(System.Type)">
            <summary>
            获取组件
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.Entity.GetComponent``1">
            <summary>
            湖区组件
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.Entity.AddComponent(System.Type)">
            <summary>
            添加组件
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.Entity.AddComponent``1">
            <summary>
            添加组件
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.Entity.AddComponent(IFramework.Modules.ECS.IComponent,System.Boolean)">
            <summary>
            添加组件
            </summary>
            <param name="component"></param>
            <param name="useSame"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.Entity.AddComponent``1(``0,System.Boolean)">
            <summary>
            添加组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="component"></param>
            <param name="useSame"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.Entity.RemoveComponent(System.Type)">
            <summary>
            移除组件
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.Entity.RemoveComponent``1">
            <summary>
            移除组件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IFramework.Modules.ECS.Entity.ContainsComponent(System.Type)">
            <summary>
            是否包含组件
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.Entity.ContainsComponent``1">
            <summary>
            是否包含组件
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.Entity.ReFreshComponent(System.Type,IFramework.Modules.ECS.IComponent)">
            <summary>
            直接替换原组件，结构体必须使用这个方法刷新数据
            </summary>
            <param name="type"></param>
            <param name="component"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.Entity.ReFreshComponent``1(``0)">
            <summary>
            直接替换原组件，结构体必须使用这个方法刷新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="component"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.Entity.Destory">
            <summary>
            解除模块注册
            </summary>
        </member>
        <member name="M:IFramework.Modules.ECS.Entity.OnDestory">
            <summary>
            解除模块注册时调用
            </summary>
        </member>
        <member name="T:IFramework.Modules.ECS.ExcuteSystem`1">
            <summary>
            处理系统
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:IFramework.Modules.ECS.ExcuteSystem`1.#ctor(IFramework.Modules.ECS.IECSModule)">
            <summary>
            ctor
            </summary>
            <param name="module"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.ExcuteSystem`1.GetEntitys">
            <summary>
            获取所有实体（模块内）
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.ExcuteSystem`1.Fitter(`0)">
            <summary>
            适配
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.ECS.ExcuteSystem`1.Excute(`0)">
            <summary>
            操作合法实体
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:IFramework.Modules.ECS.ExcuteSystem`1.OnModuleDispose">
            <summary>
            模块释放时
            </summary>
        </member>
        <member name="T:IFramework.Modules.ECS.IComponent">
            <summary>
            组件
            </summary>
        </member>
        <member name="T:IFramework.Modules.ECS.IExcuteSystem">
            <summary>
            处理系统
            </summary>
        </member>
        <member name="M:IFramework.Modules.ECS.IExcuteSystem.OnModuleDispose">
            <summary>
            模块释放时
            </summary>
        </member>
        <member name="T:IFramework.Modules.FrameworkModule">
            <summary>
            模块
            </summary>
        </member>
        <member name="M:IFramework.Modules.FrameworkModule.#ctor">
            <summary>
            阻止 New
            </summary>
        </member>
        <member name="M:IFramework.Modules.FrameworkModule.CreatInstance(System.Type,System.String)">
            <summary>
            创建实例
            </summary>
            <param name="type">模块类型</param>
            <param name="name">模块名称</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.FrameworkModule.CreatInstance``1(System.String)">
            <summary>
            创建实例
            </summary>
            <param name="name">模块名称</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.FrameworkModule.Bind(IFramework.Modules.IFrameworkModuleContainer)">
            <summary>
            绑定模块容器
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:IFramework.Modules.FrameworkModule.UnBind(System.Boolean)">
            <summary>
            解除绑定模块容器
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="P:IFramework.Modules.FrameworkModule.priority">
            <summary>
            优先级（越大释放越早释放）
            </summary>
        </member>
        <member name="P:IFramework.Modules.FrameworkModule.binded">
            <summary>
            是否绑定了
            </summary>
        </member>
        <member name="P:IFramework.Modules.FrameworkModule.container">
            <summary>
            模块所处的容器
            </summary>
        </member>
        <member name="P:IFramework.Modules.FrameworkModule.name">
            <summary>
            名字
            </summary>
        </member>
        <member name="M:IFramework.Modules.FrameworkModule.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:IFramework.Modules.FrameworkModule.Awake">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:IFramework.Modules.FrameworkModuleContainer">
            <summary>
            模块容器
            </summary>
        </member>
        <member name="P:IFramework.Modules.FrameworkModuleContainer.env">
            <summary>
            环境
            </summary>
        </member>
        <member name="M:IFramework.Modules.FrameworkModuleContainer.CreateModule(System.Type,System.String)">
            <summary>
            创建一个模块，创建完了自动绑定
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.FrameworkModuleContainer.CreateModule``1(System.String)">
            <summary>
            创建模块
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.FrameworkModuleContainer.FindModule(System.Type,System.String)">
            <summary>
            查找模块
            </summary>
            <param name="type">模块类型</param>
            <param name="name">模块名称</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.FrameworkModuleContainer.GetModule(System.Type,System.String)">
            <summary>
            获取模块
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.FrameworkModuleContainer.FindModule``1(System.String)">
            <summary>
            查找模块
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.FrameworkModuleContainer.GetModule``1(System.String)">
            <summary>
            获取模块
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.FrameworkModuleContainer.#ctor(IFramework.FrameworkEnvironment,System.Boolean)">
            <summary>
            Ctor
            </summary>
            <param name="env"></param>
            <param name="bind"></param>
        </member>
        <member name="M:IFramework.Modules.FrameworkModuleContainer.BindEnv">
            <summary>
            绑定环境
            </summary>
        </member>
        <member name="M:IFramework.Modules.FrameworkModuleContainer.UnBindEnv(System.Boolean)">
            <summary>
            解绑环境
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="M:IFramework.Modules.FrameworkModuleContainer.OnDispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:IFramework.Modules.Fsm.CompareType">
            <summary>
            比较方式
            </summary>
        </member>
        <member name="T:IFramework.Modules.Fsm.IFsmModule">
            <summary>
            FSM 模块
            </summary>
        </member>
        <member name="P:IFramework.Modules.Fsm.IFsmModule.currentState">
            <summary>
            当前节点
            </summary>
        </member>
        <member name="P:IFramework.Modules.Fsm.IFsmModule.enterState">
            <summary>
            开始节点
            </summary>
        </member>
        <member name="P:IFramework.Modules.Fsm.IFsmModule.exitState">
            <summary>
            结束节点
            </summary>
        </member>
        <member name="P:IFramework.Modules.Fsm.IFsmModule.runing">
            <summary>
            是否运行
            </summary>
        </member>
        <member name="E:IFramework.Modules.Fsm.IFsmModule.onStateChange">
            <summary>
            节点变化时
            </summary>
        </member>
        <member name="M:IFramework.Modules.Fsm.IFsmModule.CreateConditionValue``1(System.String,``0)">
            <summary>
            创建条件值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Fsm.IFsmModule.DestoryConditionValue``1(System.String,``0)">
            <summary>
            移除条件值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:IFramework.Modules.Fsm.IFsmModule.CreateCondition``1(IFramework.Modules.Fsm.ConditionValue{``0},``0,IFramework.Modules.Fsm.CompareType)">
            <summary>
            创建条件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="CompareValue"></param>
            <param name="CompareType"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Fsm.IFsmModule.CreateCondition``1(System.String,``0,IFramework.Modules.Fsm.CompareType)">
            <summary>
            创建条件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditionValName"></param>
            <param name="CompareValue"></param>
            <param name="CompareType"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Fsm.IFsmModule.CreateTransition(IFramework.Modules.Fsm.IState,IFramework.Modules.Fsm.IState)">
            <summary>
            连线
            </summary>
            <param name="head"></param>
            <param name="trail"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Fsm.IFsmModule.DestoryTransition(IFramework.Modules.Fsm.IState,IFramework.Modules.Fsm.IState)">
            <summary>
            移除连线
            </summary>
            <param name="head"></param>
            <param name="trail"></param>
        </member>
        <member name="M:IFramework.Modules.Fsm.IFsmModule.SubscribeState(IFramework.Modules.Fsm.IState)">
            <summary>
            注册节点
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:IFramework.Modules.Fsm.IFsmModule.UnSubscribeState(IFramework.Modules.Fsm.IState)">
            <summary>
            移除节点
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:IFramework.Modules.Fsm.IFsmModule.Start">
            <summary>
            开始
            </summary>
        </member>
        <member name="M:IFramework.Modules.Fsm.IFsmModule.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="M:IFramework.Modules.Fsm.IFsmModule.UnPause">
            <summary>
            继续
            </summary>
        </member>
        <member name="M:IFramework.Modules.Fsm.IFsmModule.SetBool(System.String,System.Boolean)">
            <summary>
            设置bool
            </summary>
            <param name="valName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Fsm.IFsmModule.SetFloat(System.String,System.Single)">
            <summary>
            设置float
            </summary>
            <param name="valName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Fsm.IFsmModule.SetInt(System.String,System.Int32)">
            <summary>
            设置int
            </summary>
            <param name="valName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.Fsm.FsmModule">
            <summary>
            状态机
            </summary>
        </member>
        <member name="P:IFramework.Modules.Fsm.FsmModule.exitState">
            <summary>
            退出状态
            </summary>
        </member>
        <member name="P:IFramework.Modules.Fsm.FsmModule.enterState">
            <summary>
            第一个状态
            </summary>
        </member>
        <member name="E:IFramework.Modules.Fsm.FsmModule.onStateChange">
            <summary>
            当状态改变
            </summary>
        </member>
        <member name="P:IFramework.Modules.Fsm.FsmModule.currentState">
            <summary>
            当前状态
            </summary>
        </member>
        <member name="P:IFramework.Modules.Fsm.FsmModule.runing">
            <summary>
            是否在运行
            </summary>
        </member>
        <member name="M:IFramework.Modules.Fsm.FsmModule.Start">
            <summary>
            开始运行
            </summary>
        </member>
        <member name="M:IFramework.Modules.Fsm.FsmModule.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="M:IFramework.Modules.Fsm.FsmModule.UnPause">
            <summary>
            重新运行
            </summary>
        </member>
        <member name="M:IFramework.Modules.Fsm.FsmModule.SubscribeState(IFramework.Modules.Fsm.IState)">
            <summary>
            注册状态
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:IFramework.Modules.Fsm.FsmModule.UnSubscribeState(IFramework.Modules.Fsm.IState)">
            <summary>
            解除注册状态
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:IFramework.Modules.Fsm.FsmModule.CreateTransition(IFramework.Modules.Fsm.IState,IFramework.Modules.Fsm.IState)">
            <summary>
            创建过渡线
            </summary>
            <param name="head"></param>
            <param name="trail"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Fsm.FsmModule.DestoryTransition(IFramework.Modules.Fsm.IState,IFramework.Modules.Fsm.IState)">
            <summary>
            删除过渡线
            </summary>
            <param name="head"></param>
            <param name="trail"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Fsm.FsmModule.CreateConditionValue``1(System.String,``0)">
            <summary>
            创建过渡条件值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Fsm.FsmModule.DestoryConditionValue``1(System.String,``0)">
            <summary>
            删除过渡条件值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Fsm.FsmModule.CreateCondition``1(System.String,``0,IFramework.Modules.Fsm.CompareType)">
            <summary>
            创建过度条件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditionValName"></param>
            <param name="CompareValue"></param>
            <param name="CompareType"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Fsm.FsmModule.CreateCondition``1(IFramework.Modules.Fsm.ConditionValue{``0},``0,IFramework.Modules.Fsm.CompareType)">
            <summary>
            创建过度条件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="CompareValue"></param>
            <param name="CompareType"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Fsm.FsmModule.SetBool(System.String,System.Boolean)">
            <summary>
            设置bool
            </summary>
            <param name="valName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Fsm.FsmModule.SetInt(System.String,System.Int32)">
            <summary>
            设置int
            </summary>
            <param name="valName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.Fsm.FsmModule.SetFloat(System.String,System.Single)">
            <summary>
            设置float
            </summary>
            <param name="valName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.Fsm.ConditionValue`1">
            <summary>
            状态机条件值
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.Modules.Fsm.ConditionValue`1.name">
            <summary>
            名字
            </summary>
        </member>
        <member name="P:IFramework.Modules.Fsm.ConditionValue`1.valueType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:IFramework.Modules.Fsm.ConditionValue`1.value">
            <summary>
            数值
            </summary>
        </member>
        <member name="M:IFramework.Modules.Fsm.ConditionValue`1.#ctor(System.String,System.Object)">
            <summary>
            Ctor
            </summary>
            <param name="name">数值名称</param>
            <param name="value">数值</param>
        </member>
        <member name="T:IFramework.Modules.Fsm.Transition">
            <summary>
            状态机过度线
            </summary>
        </member>
        <member name="P:IFramework.Modules.Fsm.Transition.head">
            <summary>
            头状态
            </summary>
        </member>
        <member name="P:IFramework.Modules.Fsm.Transition.trail">
            <summary>
            指向状态
            </summary>
        </member>
        <member name="M:IFramework.Modules.Fsm.Transition.BindCondition(IFramework.Modules.Fsm.ICondition)">
            <summary>
            绑定条件
            </summary>
            <param name="condtion"></param>
        </member>
        <member name="M:IFramework.Modules.Fsm.Transition.BindCondition(System.Func{System.Boolean})">
            <summary>
            绑定条件
            </summary>
            <param name="condtion"></param>
        </member>
        <member name="M:IFramework.Modules.Fsm.Transition.UnBindCondition(IFramework.Modules.Fsm.ICondition)">
            <summary>
            解绑条件
            </summary>
            <param name="condtion"></param>
        </member>
        <member name="M:IFramework.Modules.Fsm.Transition.UnBindCondition(System.Func{System.Boolean})">
            <summary>
             解绑条件
            </summary>
            <param name="condtion"></param>
        </member>
        <member name="T:IFramework.Modules.Fsm.IState">
            <summary>
            状态机状态
            </summary>
        </member>
        <member name="M:IFramework.Modules.Fsm.IState.OnEnter">
            <summary>
            切入状态执行一次
            </summary>
        </member>
        <member name="M:IFramework.Modules.Fsm.IState.OnExit">
            <summary>
            切出状态执行一次
            </summary>
        </member>
        <member name="M:IFramework.Modules.Fsm.IState.Update">
            <summary>
            处于该状态不停刷新
            </summary>
        </member>
        <member name="T:IFramework.Modules.Fsm.Condition`1">
            <summary>
            状态机过度条件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.Modules.Fsm.Condition`1.compareValue">
            <summary>
            比较值（不变化）
            </summary>
        </member>
        <member name="P:IFramework.Modules.Fsm.Condition`1.type">
            <summary>
            过渡条件类型
            </summary>
        </member>
        <member name="P:IFramework.Modules.Fsm.Condition`1.value">
            <summary>
            比较值（变化）
            </summary>
        </member>
        <member name="P:IFramework.Modules.Fsm.Condition`1.name">
            <summary>
            条件的名称
            </summary>
        </member>
        <member name="P:IFramework.Modules.Fsm.Condition`1.compareType">
            <summary>
            比较方式
            </summary>
        </member>
        <member name="M:IFramework.Modules.Fsm.Condition`1.#ctor(IFramework.Modules.Fsm.ConditionValue{`0},System.Object,IFramework.Modules.Fsm.CompareType)">
            <summary>
            Ctor
            </summary>
            <param name="cconditionValue">改变的数值</param>
            <param name="compareValue">比较的默认值</param>
            <param name="compareType">比较方式</param>
        </member>
        <member name="M:IFramework.Modules.Fsm.Condition`1.SetConditionType(IFramework.Modules.Fsm.CompareType)">
            <summary>
            设置比较值
            </summary>
            <param name="compareType"></param>
        </member>
        <member name="M:IFramework.Modules.Fsm.Condition`1.IsMetCondition">
            <summary>
            是否条件成立
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Modules.IFrameworkModules">
            <summary>
            模块组
            </summary>
        </member>
        <member name="P:IFramework.Modules.IFrameworkModules.Coroutine">
            <summary>
            协程
            </summary>
        </member>
        <member name="P:IFramework.Modules.IFrameworkModules.ECS">
            <summary>
            ecs
            </summary>
        </member>
        <member name="P:IFramework.Modules.IFrameworkModules.Fsm">
            <summary>
            fsm
            </summary>
        </member>
        <member name="P:IFramework.Modules.IFrameworkModules.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:IFramework.Modules.IFrameworkModules.MVVM">
            <summary>
            mvvm
            </summary>
        </member>
        <member name="P:IFramework.Modules.IFrameworkModules.Config">
            <summary>
            config
            </summary>
        </member>
        <member name="P:IFramework.Modules.IFrameworkModules.Recoder">
            <summary>
            操作记录
            </summary>
        </member>
        <member name="T:IFramework.Modules.LoomModule">
            <summary>
            线程反馈模块
            </summary>
        </member>
        <member name="M:IFramework.Modules.LoomModule.RunDelay(System.Action)">
            <summary>
            在主线程跑一个方法
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:IFramework.Modules.MVVM.EmptyDataModel">
            <summary>
            空数据模型
            </summary>
        </member>
        <member name="T:IFramework.Modules.MVVM.IMVVMModule">
            <summary>
            MVVM 模块
            </summary>
        </member>
        <member name="M:IFramework.Modules.MVVM.IMVVMModule.AddGroup(IFramework.Modules.MVVM.MVVMGroup)">
            <summary>
            添加组
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:IFramework.Modules.MVVM.IMVVMModule.FindGroup(System.String)">
            <summary>
            找到组
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.MVVM.IMVVMModule.RemoveGroup(IFramework.Modules.MVVM.MVVMGroup)">
            <summary>
            移除组
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:IFramework.Modules.MVVM.IMVVMModule.RemoveGroup(System.String)">
            <summary>
            移除组
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:IFramework.Modules.MVVM.MVVMGroup">
            <summary>
            MVVM 组结构
            </summary>
        </member>
        <member name="P:IFramework.Modules.MVVM.MVVMGroup.name">
            <summary>
            组名
            </summary>
        </member>
        <member name="P:IFramework.Modules.MVVM.MVVMGroup.view">
            <summary>
            界面
            </summary>
        </member>
        <member name="P:IFramework.Modules.MVVM.MVVMGroup.model">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:IFramework.Modules.MVVM.MVVMGroup.message">
            <summary>
            消息转发
            </summary>
        </member>
        <member name="P:IFramework.Modules.MVVM.MVVMGroup.viewModel">
            <summary>
            VM
            </summary>
        </member>
        <member name="M:IFramework.Modules.MVVM.MVVMGroup.#ctor(System.String,IFramework.Modules.MVVM.View,IFramework.Modules.MVVM.ViewModel,IFramework.IModel)">
            <summary>
            Ctor
            </summary>
            <param name="name"></param>
            <param name="view"></param>
            <param name="viewModel"></param>
            <param name="model"></param>
        </member>
        <member name="M:IFramework.Modules.MVVM.MVVMGroup.OnSetMessage(IFramework.Modules.Message.IMessageModule)">
            <summary>
            设置消息转发时
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IFramework.Modules.MVVM.MVVMGroup.PublishModelDirty">
            <summary>
            发布model数据发生变化
            </summary>
        </member>
        <member name="M:IFramework.Modules.MVVM.MVVMGroup.Dispose">
            <summary>
            释放时
            </summary>
        </member>
        <member name="M:IFramework.Modules.MVVM.MVVMGroup.OnDispose">
            <summary>
            释放时
            </summary>
        </member>
        <member name="T:IFramework.Modules.MVVM.MVVMModule">
            <summary>
            MVVM 模块
            </summary>
        </member>
        <member name="M:IFramework.Modules.MVVM.MVVMModule.FindGroup(System.String)">
            <summary>
            查找组
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.MVVM.MVVMModule.AddGroup(IFramework.Modules.MVVM.MVVMGroup)">
            <summary>
            注册一个 MVVM
            </summary>
        </member>
        <member name="M:IFramework.Modules.MVVM.MVVMModule.RemoveGroup(System.String)">
            <summary>
            移除组
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:IFramework.Modules.MVVM.MVVMModule.RemoveGroup(IFramework.Modules.MVVM.MVVMGroup)">
            <summary>
            移除组
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:IFramework.Modules.MVVM.MVVMModule.OnUpdate">
            <summary>
            刷新
            </summary>
        </member>
        <member name="T:IFramework.Modules.MVVM.View">
            <summary>
            界面
            </summary>
        </member>
        <member name="P:IFramework.Modules.MVVM.View.message">
            <summary>
            消息转发
            </summary>
        </member>
        <member name="F:IFramework.Modules.MVVM.View.handler">
            <summary>
            数据绑定
            </summary>
        </member>
        <member name="P:IFramework.Modules.MVVM.View.context">
            <summary>
            VM
            </summary>
        </member>
        <member name="M:IFramework.Modules.MVVM.View.BindProperty">
            <summary>
            绑定数据
            </summary>
        </member>
        <member name="M:IFramework.Modules.MVVM.View.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:IFramework.Modules.MVVM.View.OnDispose">
            <summary>
            释放时
            </summary>
        </member>
        <member name="T:IFramework.Modules.MVVM.View`1">
            <summary>
            方便书写
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.Modules.MVVM.View`1.Tcontext">
            <summary>
            方便书写
            </summary>
        </member>
        <member name="T:IFramework.Modules.MVVM.ViewModel">
            <summary>
            VM
            </summary>
        </member>
        <member name="P:IFramework.Modules.MVVM.ViewModel.message">
            <summary>
            消息转发
            </summary>
        </member>
        <member name="P:IFramework.Modules.MVVM.ViewModel.model">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:IFramework.Modules.MVVM.ViewModel.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:IFramework.Modules.MVVM.ViewModel.SyncModelValue">
            <summary>
            同步model数据
            </summary>
        </member>
        <member name="M:IFramework.Modules.MVVM.ViewModel.SubscribeMessage">
            <summary>
            注册消息监听
            </summary>
        </member>
        <member name="M:IFramework.Modules.MVVM.ViewModel.UnSubscribeMessage">
            <summary>
            取消消息监听
            </summary>
        </member>
        <member name="M:IFramework.Modules.MVVM.ViewModel.OnDispose">
            <summary>
            释放时
            </summary>
        </member>
        <member name="T:IFramework.Modules.MVVM.ViewModel`1">
            <summary>
            方便书写
            </summary>
        </member>
        <member name="P:IFramework.Modules.MVVM.ViewModel`1.Tmodel">
            <summary>
            方便书写
            </summary>
        </member>
        <member name="T:IFramework.Modules.UpdateFrameworkModule">
            <summary>
            OnUpdate OnEnable OnDisable
            </summary>
        </member>
        <member name="P:IFramework.Modules.UpdateFrameworkModule.enable">
            <summary>
            开启关闭 Update
            </summary>
        </member>
        <member name="M:IFramework.Modules.UpdateFrameworkModule.SetActive(System.Boolean)">
            <summary>
            改变 enable
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:IFramework.Modules.UpdateFrameworkModule.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:IFramework.Modules.UpdateFrameworkModule.Update">
            <summary>
            刷新
            </summary>
        </member>
        <member name="T:IFramework.FloatEx">
            <summary>
            静态扩展
            </summary>
        </member>
        <member name="M:IFramework.FloatEx.Abs(System.Single)">
            <summary>
                    取绝对值
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.FloatEx.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            限制在 min-max之间
            </summary>
            <param name="self"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.FloatEx.Clamp01(System.Single)">
            <summary>
            限制在0-1
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.FloatEx.Floor(System.Single)">
            <summary>
            获取比self小的最大整数
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.FloatEx.Repeat(System.Single,System.Single)">
            <summary>
            从0-length 重复
            </summary>
            <param name="self"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.FloatEx.RoundToInt(System.Single)">
            <summary>
            找到最近的 int
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.FloatEx.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            插值
            </summary>
            <param name="self"></param>
            <param name="end"></param>
            <param name="pecent"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.FloatEx.AsInt(System.Single)">
            <summary>
            强制转换
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.IEnumerableEx">
            <summary>
            集合静态扩展
            </summary>
        </member>
        <member name="M:IFramework.IEnumerableEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IEnumerableEx.ForEach``1(``0[],System.Action{``0})">
            <summary>
            遍历集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IEnumerableEx.ForEach``1(``0[],System.Action{System.Int32,``0})">
            <summary>
            遍历集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IEnumerableEx.ReverseForEach``1(System.Collections.Generic.List{``0},System.Action{``0})">
            <summary>
            反向遍历集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IEnumerableEx.ForEach``1(System.Collections.Generic.List{``0},System.Action{System.Int32,``0})">
            <summary>
            遍历集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.IEnumerableEx.CopyTo``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            拷贝本集合数据到另一个集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">源集合</param>
            <param name="to">目标集合</param>
            <param name="begin">开始下表</param>
            <param name="end">结束下标</param>
        </member>
        <member name="M:IFramework.IEnumerableEx.Merge``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1}[])">
            <summary>
            混合字典
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="dictionaries"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IEnumerableEx.ForEach``2(System.Collections.Generic.Dictionary{``0,``1},System.Action{``0,``1})">
            <summary>
            遍历字典
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="self"></param>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.IEnumerableEx.AddRange``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1},System.Boolean)">
            <summary>
            添加字段到字典
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="self"></param>
            <param name="addInDict"></param>
            <param name="isOverride"></param>
        </member>
        <member name="T:IFramework.IntEx">
            <summary>
            int 静态扩展
            </summary>
        </member>
        <member name="M:IFramework.IntEx.isPrimeNumber(System.Int32)">
            <summary>
            是不是素数
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IntEx.Swap(System.Int32,System.Int32@)">
            <summary>
            交换两个数
            </summary>
            <param name="self"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IntEx.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            约束数值大小
            </summary>
            <param name="self"></param>
            <param name="max"></param>
            <param name="min"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IntEx.Lerp(System.Int32,System.Single,System.Single)">
            <summary>
            线性插值  self  +（end-self）* percent
            </summary>
            <param name="self"></param>
            <param name="end"></param>
            <param name="pecent"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.IOEx">
            <summary>
            文件扩展
            </summary>
        </member>
        <member name="T:IFramework.IOEx.FileSizeLev">
            <summary>
            文件大小等级
            </summary>
        </member>
        <member name="M:IFramework.IOEx.GetFileSize(System.Int64)">
            <summary>
            获取文件的 带等级的大小
            结果中间有空格
            </summary>
            <param name="length">文件长度</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.GetFileLength(System.String)">
            <summary>
            获取文件长度
            </summary>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.GetFileSize(System.String)">
            <summary>
            获取文件的 带等级的大小通过文件路径
            结果中间有空格
            </summary>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.ReadText(System.String,System.Text.Encoding)">
            <summary>
            读取 string
            </summary>
            <param name="path">路径</param>
            <param name="encoding">文件编码</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.WriteText(System.String,System.String,System.Text.Encoding)">
            <summary>
            写入 string
            </summary>
            <param name="path">路径</param>
            <param name="content">写入内容</param>
            <param name="encoding">文件编码</param>
        </member>
        <member name="M:IFramework.IOEx.ReadBytes(System.String)">
            <summary>
            读取字节流
            </summary>
            <param name="path">路径</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.WriteBytes(System.String,System.Byte[])">
            <summary>
            写入字节流
            </summary>
            <param name="path">路径</param>
            <param name="buff">字节流</param>
        </member>
        <member name="M:IFramework.IOEx.GetSubDirs(System.String)">
            <summary>
            获取一个路径下的子文件夹
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.GetSubFiles(System.String,System.Boolean,System.String)">
            <summary>
            获取一个路径下子文件
            </summary>
            <param name="path"></param>
            <param name="isAll"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.IsDirectory(System.String)">
            <summary>
            是否是一个文件夹
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.ClearDir(System.String)">
            <summary>
            清空文件夹
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:IFramework.IOEx.RemoveEmptyDirectory(System.String)">
            <summary>
            移除空文件夹
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.CombinePath(System.String,System.String)">
            <summary>
            拼接路径
            </summary>
            <param name="path"></param>
            <param name="toCombinePath"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.CombinePath(System.String,System.String[])">
            <summary>
            拼接路径
            </summary>
            <param name="path"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.GetFileName(System.String)">
            <summary>
            获取文件名
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.GetFileNameWithoutExtend(System.String)">
            <summary>
            获取没有后缀的文件名
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.GetFileExtendName(System.String)">
            <summary>
            获取文件后缀
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.GetDirPath(System.String)">
            <summary>
            获取文件夹路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.GetLastDirName(System.String)">
            <summary>
            获取上一层文件夹名
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.ToRegularPath(System.String)">
            <summary>
            规范路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.ToRemotePath(System.String)">
            <summary>
            转为远程路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IOEx.MakeDirectoryExist(System.String)">
            <summary>
            如果文件夹不存在则创建
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:IFramework.ObjectEx">
            <summary>
            object 静态扩展
            </summary>
        </member>
        <member name="M:IFramework.ObjectEx.As``1(System.Object)">
            <summary>
            强转
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ObjectEx.Is``1(System.Object)">
            <summary>
            对象是否是该类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.StringEx">
            <summary>
            string静态扩展
            </summary>
        </member>
        <member name="M:IFramework.StringEx.ReplaceFirst(System.String,System.String,System.String,System.Int32)">
            <summary>
            替换第一个符合的字符串
            </summary>
            <param name="self"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <param name="startAt"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx.RemoveString(System.String,System.String[])">
            <summary>
            移除字符串
            </summary>
            <param name="self"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx.SplitAndTrim(System.String,System.Char[])">
            <summary>
            分割 并且去掉空格
            </summary>
            <param name="self"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx.Cut(System.String,System.String,System.String)">
            <summary>
            截取俩字符串中间的字符
            </summary>
            <param name="self"></param>
            <param name="front"></param>
            <param name="behind"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx.CutAfter(System.String,System.String)">
            <summary>
            截取指定字符串后的字符
            </summary>
            <param name="self"></param>
            <param name="front"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx.CutBefore(System.String,System.String)">
            <summary>
            截取指定字符串前的字符
            </summary>
            <param name="str"></param>
            <param name="behind"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx.UpperFirst(System.String)">
            <summary>
            第一个字符大写
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx.LowerFirst(System.String)">
            <summary>
            第一个字符小写
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx.ToUnixLineEndings(System.String)">
            <summary>
            字符串结尾转Unix编码
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx.AppendHead(System.String,System.String)">
            <summary>
            在字符串前拼接字符串
            </summary>
            <param name="self"></param>
            <param name="toPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx.Append(System.String,System.String)">
            <summary>
            拼接字符串
            </summary>
            <param name="self"></param>
            <param name="toAppend"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx.Append(System.String,System.String[])">
            <summary>
            拼接字符串
            </summary>
            <param name="self"></param>
            <param name="toAppend"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx.AddSpacedBetwwenWord(System.String)">
            <summary>
            在字符串之间加空格，根据大小写
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.StringEx_Regex">
            <summary>
            正则
            </summary>
        </member>
        <member name="M:IFramework.StringEx_Regex.IsMail(System.String)">
            <summary>
            是否是邮箱
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx_Regex.IsCellPhoneNumber(System.String)">
            <summary>
            是否是电话
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx_Regex.IsAge(System.String)">
            <summary>
            是否是年龄
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx_Regex.IsPassWord(System.String)">
            <summary>
            是否是密码
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx_Regex.HasChinese(System.String)">
            <summary>
            是否包含中文
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx_Regex.IsUrl(System.String)">
            <summary>
            是否是网址
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx_Regex.IsIPv4(System.String)">
            <summary>
            是否是IPV4
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx_Regex.IsLegalFieldName(System.String)">
            <summary>
            是否是合法字段名称
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx_Regex.RemoveChinese(System.String)">
            <summary>
            移除中文
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx_Regex.Removeletters(System.String)">
            <summary>
            移除字母
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx_Regex.RemoveNumbers(System.String)">
            <summary>
            移除数字
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx_Regex.RemoveNumbers(System.String,System.Int32,System.Int32)">
            <summary>
            移除数字
            </summary>
            <param name="self"></param>
            <param name="minLen"></param>
            <param name="maxLen"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx_Regex.RemoveNumbers(System.String,System.Int32)">
            <summary>
            移除数字
            </summary>
            <param name="self"></param>
            <param name="minLen"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.StringEx_Regex.RemoveNotNumber(System.String)">
            <summary>
            留下数字
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.TypeEx">
            <summary>
            Type静态扩展
            </summary>
        </member>
        <member name="M:IFramework.TypeEx.GetSubTypesInAssembly(System.Type)">
            <summary>
            获取当前程序集中的类型的子类，3.5有问题
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.TypeEx.GetSubTypesInAssemblys(System.Type)">
            <summary>
            获取所有程序集中的类型的子类，3.5有问题
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.TypeEx.CreatInstance(System.Type)">
            <summary>
            实例化
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.TypeEx.IsExtendInterface(System.Type,System.Type)">
            <summary>
            是否继承接口
            </summary>
            <param name="self"></param>
            <param name="Interface"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.TypeEx.IsSubclassOfGeneric(System.Type,System.Type)">
            <summary>
            是否继承自泛型类
            </summary>
            <param name="self"></param>
            <param name="genericType"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.TypeEx.GetTypeTree(System.Type)">
            <summary>
            获取类型树
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.TypeEx.GetExtensionMethods(System.Type,System.Reflection.Assembly)">
            <summary>
            获取程序集下的静态扩展
            </summary>
            <param name="self"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Unit">
            <summary>
            基类
            </summary>
        </member>
        <member name="P:IFramework.Unit.disposed">
            <summary>
            是否已经释放
            </summary>
        </member>
        <member name="M:IFramework.Unit.OnDispose">
            <summary>
            释放时
            </summary>
        </member>
        <member name="M:IFramework.Unit.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:IFramework.Utility.Astar.AStarMap2X">
            <summary>
            二维A* 地图
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarMap2X.Item(IFramework.Point2)">
            <summary>
            便于调用点位
            </summary>
            <returns></returns>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarMap2X.walkSideways">
            <summary>
            是否可以斜着走
            </summary>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap2X.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap2X.GetHCost(IFramework.Utility.Astar.AStarNode2X,IFramework.Utility.Astar.AStarNode2X)">
            <summary>
            计算地图上两点距离
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap2X.GetNeighborNodes(IFramework.Utility.Astar.AStarNode2X)">
            <summary>
            获取邻居节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap2X.ReadMap``1(System.Func{``0,IFramework.Utility.Astar.AStarNodeType},``0[0:,0:],System.Boolean)">
            <summary>
            加载地图
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func">更具输入数据转化为NodeType</param>
            <param name="arr">二维数组</param>
            <param name="walkSideways">是否可以斜着走</param>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap2X.Reset">
            <summary>
            重置地图数据
            </summary>
        </member>
        <member name="T:IFramework.Utility.Astar.AStarMap3X">
            <summary>
            三维A* 地图
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarMap3X.walkSideways">
            <summary>
            是否可以斜着走
            </summary>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap3X.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarMap3X.Item(IFramework.Point3)">
            <summary>
            便于调用点位
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap3X.ReadMap``1(System.Func{``0,IFramework.Utility.Astar.AStarNodeType},``0[0:,0:,0:],System.Boolean)">
            <summary>
            加载地图
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func">更具输入数据转化为NodeType</param>
            <param name="arr">二维数组</param>
            <param name="walkSideways">是否可以斜着走</param>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap3X.GetHCost(IFramework.Utility.Astar.AStarNode3X,IFramework.Utility.Astar.AStarNode3X)">
            <summary>
            计算地图上两点距离
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap3X.GetNeighborNodes(IFramework.Utility.Astar.AStarNode3X)">
            <summary>
            获取邻居节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarMap3X.Reset">
            <summary>
            重置地图数据
            </summary>
        </member>
        <member name="T:IFramework.Utility.Astar.AStarNode2X">
            <summary>
            二维 A* 地图节点
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarNode2X.nodeType">
            <summary>
            节点类型（是否可以行走）
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarNode2X.parentNode">
            <summary>
            父节点，用于返回路径
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarNode2X.mapPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarNode2X.#ctor(IFramework.Point2,IFramework.Utility.Astar.AStarNodeType)">
            <summary>
            ctor
            </summary>
            <param name="mapPos"></param>
            <param name="nodeType"></param>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarNode2X.SetDefaultParent(IFramework.Utility.Astar.IAStarNode)">
            <summary>
            设置默认父节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarNode2X.TryUpdateFCost(System.Single,System.Single,IFramework.Utility.Astar.IAStarNode)">
            <summary>
            尝试更新最短距离
            </summary>
            <param name="g"></param>
            <param name="h"></param>
            <param name="trySetNode"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarNode2X.Reset">
            <summary>
            重置节点数据
            </summary>
        </member>
        <member name="T:IFramework.Utility.Astar.AStarNode3X">
            <summary>
            三维 A* 地图节点
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarNode3X.nodeType">
            <summary>
            节点类型（是否可以行走）
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarNode3X.parentNode">
            <summary>
            父节点，用于返回路径
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.AStarNode3X.mapPos">
            <summary>
            
            </summary>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarNode3X.#ctor(IFramework.Point3,IFramework.Utility.Astar.AStarNodeType)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarNode3X.SetDefaultParent(IFramework.Utility.Astar.IAStarNode)">
            <summary>
            设置默认父节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarNode3X.TryUpdateFCost(System.Single,System.Single,IFramework.Utility.Astar.IAStarNode)">
            <summary>
            尝试更新最短距离
            </summary>
            <param name="g"></param>
            <param name="h"></param>
            <param name="trySetNode"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.AStarNode3X.Reset">
            <summary>
            重置节点数据
            </summary>
        </member>
        <member name="T:IFramework.Utility.Astar.AStarNodeType">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="F:IFramework.Utility.Astar.AStarNodeType.Wall">
            <summary>
            不可行走
            </summary>
        </member>
        <member name="F:IFramework.Utility.Astar.AStarNodeType.Walkable">
            <summary>
            可行走
            </summary>
        </member>
        <member name="T:IFramework.Utility.Astar.IAstarMap`1">
            <summary>
            地图
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.Utility.Astar.IAstarMap`1.walkSideways">
            <summary>
            是否可以斜着走
            </summary>
        </member>
        <member name="M:IFramework.Utility.Astar.IAstarMap`1.GetNeighborNodes(`0)">
            <summary>
            获取邻居节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.IAstarMap`1.GetHCost(`0,`0)">
            <summary>
            获取两点之间距离
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.IAstarMap`1.Reset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="T:IFramework.Utility.Astar.IAStarNode">
            <summary>
            A*节点
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.IAStarNode.nodeType">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="P:IFramework.Utility.Astar.IAStarNode.parentNode">
            <summary>
            父节点，用于寻路递归
            </summary>
        </member>
        <member name="M:IFramework.Utility.Astar.IAStarNode.SetDefaultParent(IFramework.Utility.Astar.IAStarNode)">
            <summary>
            设置默认父节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:IFramework.Utility.Astar.IAStarNode.TryUpdateFCost(System.Single,System.Single,IFramework.Utility.Astar.IAStarNode)">
            <summary>
            尝试刷新数据
            </summary>
            <param name="g"></param>
            <param name="h"></param>
            <param name="trySetNode"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Astar.IAStarNode.Reset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="T:IFramework.Utility.Astar.IAStarSearcher`2">
            <summary>
            A* 路径搜寻者
            </summary>
            <typeparam name="Node">A* 节点类型</typeparam>
            <typeparam name="Map">A* 地图leix</typeparam>
        </member>
        <member name="M:IFramework.Utility.Astar.IAStarSearcher`2.Search(`0,`0)">
            <summary>
            寻路
            </summary>
            <param name="start">起点</param>
            <param name="end">终点</param>
            <returns>节点路径</returns>
        </member>
        <member name="M:IFramework.Utility.Astar.IAStarSearcher`2.LoadMap(`1)">
            <summary>
            加载 A* 地图
            </summary>
            <param name="map"></param>
        </member>
        <member name="T:IFramework.Utility.DeepCopy">
            <summary>
            深拷贝
            </summary>
        </member>
        <member name="M:IFramework.Utility.DeepCopy.ReflectionDeepCopy``1(``0)">
            <summary>
            0.9281 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.DeepCopy.ReflectionDeepCopy(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.DeepCopy.XmlDeepCopy``1(``0)">
            <summary>
            1.6543 public
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.DeepCopy.BinaryDeepCopy``1(``0)">
            <summary>
            1.7278 [Serializable]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Encryption.HashEncode.GetSecurity">
            得到随机哈希加密字符串
        </member>
        <member name="M:IFramework.Utility.Encryption.HashEncode.GetRandomValue">
            得到一个随机数值
        </member>
        <member name="M:IFramework.Utility.Encryption.HashEncode.HashEncoding(System.String)">
            哈希加密一个字符串
        </member>
        <member name="M:IFramework.Utility.Encryption.RsaEncryption.RSAKey(System.String@,System.String@)">
            <summary>
            RSA 的密钥产生 产生私钥 和公钥 
            </summary>
        </member>
        <member name="T:IFramework.Utility.Encryption.XorEncryption">
            <summary>
            加密解密相关的实用函数。
            </summary>
        </member>
        <member name="M:IFramework.Utility.Encryption.XorEncryption.GetXorBytes(System.Byte[],System.Byte[],System.Int32)">
            <param name="bytes">原始二进制流。</param>
            <param name="code">异或二进制流。</param>
            <param name="length">异或计算长度，若小于 0，则计算整个二进制流。</param>
            <returns>异或后的二进制流。</returns>
        </member>
        <member name="M:IFramework.Utility.Encryption.XorEncryption.GetSelfXorBytes(System.Byte[],System.Byte[])">
            此方法将复用并改写传入的 bytes 作为返回值，而不额外分配内存空间。
        </member>
        <member name="T:IFramework.Utility.ProcessUtil">
            <summary>
            进程工具
            </summary>
        </member>
        <member name="M:IFramework.Utility.ProcessUtil.CreateProcess(System.String,System.String,System.String)">
            <summary>
            创建进程
            </summary>
            <param name="cmd"></param>
            <param name="args"></param>
            <param name="workingDir"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.ProcessUtil.OuputLog(System.Diagnostics.Process,System.Boolean)">
            <summary>
            进程输出Log
            </summary>
            <param name="p"></param>
            <param name="isThrowExcpetion"></param>
        </member>
        <member name="M:IFramework.Utility.ProcessUtil.OpenFloder(System.String)">
            <summary>
            打开文件夹
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:IFramework.Utility.Verifier">
            <summary>
            校验相关的实用函数
            </summary>
        </member>
        <member name="M:IFramework.Utility.Verifier.GetCrc32(System.Byte[])">
            <summary>
             计算二进制流的 CRC32。
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Verifier.GetCrc32(System.String)">
            <summary>
             计算指定文件的 CRC32。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Verifier.GetMD5(System.Byte[])">
            <summary>
            计算二进制流的 MD5。
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Verifier.GetFileMD5(System.String)">
            <summary>
             计算指定文件的 CRC32。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Utility.Verifier.GetStringMD5(System.String)">
            <summary>
            获取字符串 MD5
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Utility.Verifier.Crc32">
            <summary>
            CRC32 算法。
            </summary>
        </member>
        <member name="F:IFramework.Utility.Verifier.Crc32.DefaultPolynomial">
            默认多项式。
        </member>
        <member name="F:IFramework.Utility.Verifier.Crc32.DefaultSeed">
            默认种子数。
        </member>
        <member name="M:IFramework.Utility.Verifier.Crc32.#ctor">
            初始化 CRC32 类的新实例。
        </member>
        <member name="M:IFramework.Utility.Verifier.Crc32.#ctor(System.UInt32,System.UInt32)">
            初始化 CRC32 类的新实例。
            <param name="polynomial">指定的多项式。</param>
            <param name="seed">指定的种子数。</param>
        </member>
        <member name="M:IFramework.Utility.Verifier.Crc32.Initialize">
            初始化 Crc32 类的实现。
        </member>
        <member name="M:IFramework.Utility.Verifier.Crc32.HashCore(System.Byte[],System.Int32,System.Int32)">
            将写入对象的数据路由到哈希算法以计算哈希值。
            <param name="array">要计算其哈希代码的输入。</param>
            <param name="ibStart">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="cbSize">字节数组中用作数据的字节数。</param>
        </member>
        <member name="M:IFramework.Utility.Verifier.Crc32.HashFinal">
            在加密流对象处理完最后的数据后完成哈希计算。
        </member>
        <member name="T:IFramework.IBelongToEnvironment">
            <summary>
            属于环境
            </summary>
        </member>
        <member name="P:IFramework.IBelongToEnvironment.env">
            <summary>
            环境
            </summary>
        </member>
        <member name="T:IFramework.IContainer">
            <summary>
            容器
            </summary>
        </member>
        <member name="T:IFramework.IAwaitable`1">
            <summary>
            表示一个可等待对象，如果一个方法返回此类型的实例，则此方法可以使用 `await` 异步等待。
            </summary>
            <typeparam name="TAwaiter">用于给 await 确定返回时机的 IAwaiter 的实例。</typeparam>
        </member>
        <member name="M:IFramework.IAwaitable`1.GetAwaiter">
            <summary>
            获取一个可用于 await 关键字异步等待的异步等待对象。
            此方法会被编译器自动调用。
            </summary>
        </member>
        <member name="T:IFramework.IAwaitable`2">
            <summary>
            表示一个包含返回值的可等待对象，如果一个方法返回此类型的实例，则此方法可以使用 `await` 异步等待返回值。
            </summary>
            <typeparam name="TAwaiter">用于给 await 确定返回时机的 IAwaiter{<typeparamref name="TResult"/>} 的实例。</typeparam>
            <typeparam name="TResult">异步返回的返回值类型。</typeparam>
        </member>
        <member name="M:IFramework.IAwaitable`2.GetAwaiter">
            <summary>
            获取一个可用于 await 关键字异步等待的异步等待对象。
            此方法会被编译器自动调用。
            </summary>
        </member>
        <member name="T:IFramework.IAwaiter">
            <summary>
            用于给 await 确定异步返回的时机。
            </summary>
        </member>
        <member name="P:IFramework.IAwaiter.IsCompleted">
            <summary>
            获取一个状态，该状态表示正在异步等待的操作已经完成（成功完成或发生了异常）；此状态会被编译器自动调用。
            在实现中，为了达到各种效果，可以灵活应用其值：可以始终为 true，或者始终为 false。
            </summary>
        </member>
        <member name="M:IFramework.IAwaiter.GetResult">
            <summary>
            此方法会被编译器在 await 结束时自动调用以获取返回状态（包括异常）。
            </summary>
        </member>
        <member name="T:IFramework.IAwaiter`1">
            <summary>
            用于给 await 确定异步返回的时机，并获取到返回值。
            </summary>
            <typeparam name="TResult">异步返回的返回值类型。</typeparam>
        </member>
        <member name="P:IFramework.IAwaiter`1.IsCompleted">
            <summary>
            获取一个状态，该状态表示正在异步等待的操作已经完成（成功完成或发生了异常）；此状态会被编译器自动调用。
            在实现中，为了达到各种效果，可以灵活应用其值：可以始终为 true，或者始终为 false。
            </summary>
        </member>
        <member name="M:IFramework.IAwaiter`1.GetResult">
            <summary>
            获取此异步等待操作的返回值，此方法会被编译器在 await 结束时自动调用以获取返回值（包括异常）。
            </summary>
            <returns>异步操作的返回值。</returns>
        </member>
        <member name="T:IFramework.ICriticalAwaiter">
            <summary>
            当执行关键代码（此代码中的错误可能给应用程序中的其他状态造成负面影响）时，
            用于给 await 确定异步返回的时机。
            </summary>
        </member>
        <member name="T:IFramework.ICriticalAwaiter`1">
            <summary>
            当执行关键代码（此代码中的错误可能给应用程序中的其他状态造成负面影响）时，
            用于给 await 确定异步返回的时机，并获取到返回值。
            </summary>
            <typeparam name="TResult">异步返回的返回值类型。</typeparam>
        </member>
        <member name="T:IFramework.IDescription">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:IFramework.IDescription.description">
            <summary>
            描述内容
            </summary>
        </member>
        <member name="T:IFramework.IModel">
            <summary>
            模型
            </summary>
        </member>
        <member name="T:IFramework.IUniqueIDObject">
            <summary>
            唯一id
            </summary>
        </member>
        <member name="P:IFramework.IUniqueIDObject.guid">
            <summary>
            唯一id
            </summary>
        </member>
        <member name="T:IFramework.IUnit">
            <summary>
            积累接口
            </summary>
        </member>
        <member name="P:IFramework.IUnit.disposed">
            <summary>
            是否释放
            </summary>
        </member>
        <member name="T:IFramework.IValueContainer`1">
            <summary>
            数据容器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.IValueContainer`1.value">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:IFramework.IVersion">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:IFramework.IVersion.version">
            <summary>
            版本
            </summary>
        </member>
        <member name="T:IFramework.RequireAttribute">
            <summary>
            依赖描述
            </summary>
        </member>
        <member name="P:IFramework.RequireAttribute.description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:IFramework.RequireAttribute.type">
            <summary>
            types
            </summary>
        </member>
        <member name="M:IFramework.RequireAttribute.#ctor(System.Type)">
            <summary>
            ctor
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:IFramework.RequireAttribute.#ctor(System.Type,System.String)">
            <summary>
            ctor
            </summary>
            <param name="type"></param>
            <param name="description"></param>
        </member>
        <member name="T:IFramework.ScriptVersionAttribute">
            <summary>
             框架代码版本默认有 1
            </summary>
        </member>
        <member name="P:IFramework.ScriptVersionAttribute.version">
            <summary>
            版本
            </summary>
        </member>
        <member name="M:IFramework.ScriptVersionAttribute.#ctor(System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="version"></param>
        </member>
        <member name="T:IFramework.VersionUpdateAttribute">
            <summary>
            代码升级说明
            </summary>
        </member>
        <member name="P:IFramework.VersionUpdateAttribute.description">
            <summary>
            描述
            </summary>
        </member>
        <member name="M:IFramework.VersionUpdateAttribute.#ctor(System.Int32,System.String)">
            <summary>
            ctor
            </summary>
            <param name="version"></param>
            <param name="description"></param>
        </member>
        <member name="T:IFramework.EnvironmentType">
            <summary>
            环境类型
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.None">
            <summary>
            所有，配合环境初始化
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev0">
            <summary>
            环境0
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev1">
            <summary>
            环境1
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev2">
            <summary>
            环境2
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev3">
            <summary>
            环境3
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev4">
            <summary>
            环境4
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev5">
            <summary>
            环境5
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev6">
            <summary>
            环境6
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev7">
            <summary>
            环境7
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev8">
            <summary>
            环境8
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev9">
            <summary>
            环境9
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Extra0">
            <summary>
            额外的1
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Extra1">
            <summary>
            额外的1
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Extra2">
            <summary>
            额外的2
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Extra3">
            <summary>
            额外的3
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Extra4">
            <summary>
            额外的4
            </summary>
        </member>
        <member name="T:IFramework.ICommand">
            <summary>
            命令
            </summary>
        </member>
        <member name="M:IFramework.ICommand.Excute">
            <summary>
            处理
            </summary>
        </member>
        <member name="T:IFramework.IRecyclable">
            <summary>
            可回收
            </summary>
        </member>
        <member name="P:IFramework.IRecyclable.recyled">
            <summary>
            是否被回收
            </summary>
        </member>
        <member name="M:IFramework.IRecyclable.Recyle">
            <summary>
            回收
            </summary>
        </member>
        <member name="T:IFramework.RecyclableObjectCollection">
            <summary>
            可回收集合
            </summary>
        </member>
        <member name="M:IFramework.RecyclableObjectCollection.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:IFramework.RecyclableObjectCollection.Get(System.Type,IFramework.IEventArgs)">
            <summary>
            获取一个实例
            </summary>
            <param name="type"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.RecyclableObjectCollection.Get``1(IFramework.IEventArgs)">
            <summary>
            获取一个实例
            </summary>
            <typeparam name="Object"></typeparam>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.RecyclableObjectCollection.Set(System.Type,IFramework.RecyclableObject,IFramework.IEventArgs)">
            <summary>
            回收一个实例
            </summary>
            <param name="type"></param>
            <param name="t"></param>
            <param name="arg"></param>
        </member>
        <member name="M:IFramework.RecyclableObjectCollection.Set``1(``0,IFramework.IEventArgs)">
            <summary>
            回收一个实例
            </summary>
            <typeparam name="Object"></typeparam>
            <param name="t"></param>
            <param name="arg"></param>
        </member>
        <member name="M:IFramework.RecyclableObjectCollection.GetFromMemory(System.Guid,IFramework.RecyclableObject@)">
            <summary>
            获取没有回收的实例
            </summary>
            <param name="id"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.RecyclableObjectCollection.Recyle(System.Guid)">
            <summary>
            回收一个运行中的实例
            </summary>
        </member>
        <member name="M:IFramework.RecyclableObjectCollection.RecyleAll">
            <summary>
            回收所有运行中的实例
            </summary>
        </member>
        <member name="M:IFramework.RecyclableObjectCollection.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:IFramework.FrameworkEnvironment">
            <summary>
            框架运行环境
            </summary>
        </member>
        <member name="P:IFramework.FrameworkEnvironment.inited">
            <summary>
            环境是否已经初始化
            </summary>
        </member>
        <member name="P:IFramework.FrameworkEnvironment.cycleCollection">
            <summary>
            IRecyclable 实例的环境容器
            </summary>
        </member>
        <member name="P:IFramework.FrameworkEnvironment.container">
            <summary>
            IOC容器
            </summary>
        </member>
        <member name="P:IFramework.FrameworkEnvironment.modules">
            <summary>
            环境下自带的模块容器
            </summary>
        </member>
        <member name="P:IFramework.FrameworkEnvironment.envType">
            <summary>
            环境类型
            </summary>
        </member>
        <member name="P:IFramework.FrameworkEnvironment.deltaTime">
            <summary>
            最近一次 Update 方法用时
            </summary>
        </member>
        <member name="P:IFramework.FrameworkEnvironment.timeSinceInit">
            <summary>
            初始化之后的时间
            </summary>
        </member>
        <member name="P:IFramework.FrameworkEnvironment.current">
            <summary>
            当前环境
            </summary>
        </member>
        <member name="M:IFramework.FrameworkEnvironment.#ctor(IFramework.EnvironmentType)">
            <summary>
            ctor
            </summary>
            <param name="envType"></param>
        </member>
        <member name="M:IFramework.FrameworkEnvironment.Init(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            初始化环境，3.5 使用
            </summary>
            <param name="types">需要初始化调用的静态类</param>
        </member>
        <member name="M:IFramework.FrameworkEnvironment.InitWithAttribute">
            <summary>
            初始化环境，4.X 使用
            </summary>
        </member>
        <member name="M:IFramework.FrameworkEnvironment.OnDispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:IFramework.FrameworkEnvironment.Update">
            <summary>
            刷新环境
            </summary>
        </member>
        <member name="M:IFramework.FrameworkEnvironment.WaitEnvironmentFrame(System.Action)">
            <summary>
            等待 环境的 update，即等到该环境的线程来临
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.FrameworkEnvironment.BindUpdate(System.Action)">
            <summary>
            绑定帧
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.FrameworkEnvironment.UnBindUpdate(System.Action)">
            <summary>
            移除绑定帧
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.FrameworkEnvironment.BindDispose(System.Action)">
            <summary>
            绑定dispose
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.FrameworkEnvironment.UnBindDispose(System.Action)">
            <summary>
            移除绑定dispose
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:IFramework.Net.OnReceivedHandler">
            <summary>
            接收数据处理,返回的是实际接收到的数据
            </summary>
            <param name="sToken"></param>
            <param name="content"></param>
        </member>
        <member name="T:IFramework.Net.OnReceivedSegmentHandler">
            <summary>
            接受数据处理，返回预设的缓冲区大小和实际接收到的数据偏移和数量
            </summary>
            <param name="session"></param>
        </member>
        <member name="T:IFramework.Net.OnSentHandler">
            <summary>
            发送数据处理
            </summary>
            <param name="session"></param>
        </member>
        <member name="T:IFramework.Net.OnAcceptedHandler">
            <summary>
            接受连接对象处理
            </summary>
            <param name="sToken"></param>
        </member>
        <member name="T:IFramework.Net.OnDisconnectedHandler">
            <summary>
            断开连接对象处理
            </summary>
            <param name="sToken"></param>
        </member>
        <member name="T:IFramework.Net.OnConnectedHandler">
            <summary>
            建立连接对象处理
            </summary>
            <param name="sToken"></param>
            <param name="isConnected"></param>
        </member>
        <member name="P:IFramework.Net.SocketToken.TokenId">
            <summary>
            会话编号
            </summary>
        </member>
        <member name="P:IFramework.Net.SocketToken.TokenSocket">
            <summary>
            会话socket对象
            </summary>
        </member>
        <member name="P:IFramework.Net.SocketToken.TokenIpEndPoint">
            <summary>
            会话的终结点
            </summary>
        </member>
        <member name="M:IFramework.Net.SocketToken.#ctor(System.Int32)">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:IFramework.Net.SocketToken.Close">
            <summary>
            关闭该连接对象，释放相关资源,非完全释放Socket对象
            </summary>
        </member>
        <member name="M:IFramework.Net.SocketToken.Dispose">
            <summary>
            关闭该连接对象并释放该对象资源
            </summary>
        </member>
        <member name="M:IFramework.Net.SocketToken.CompareTo(IFramework.Net.SocketToken)">
            <summary>
            根据SocketId比较大小
            </summary>
            <param name="sToken"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.SocketToken.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="isDisposing"></param>
        </member>
        <member name="P:IFramework.Net.Http.HttpHeader.Extensions">
            <summary>
            extend reserve
            </summary>
        </member>
        <member name="P:IFramework.Net.Http.HttpHeader.DNT">
            <summary>
            do not track
            </summary>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.#ctor(System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="capacity">初始容量</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.#ctor(System.Byte[])">
            <summary>
            构造方法
            </summary>
            <param name="bytes">初始字节数组</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Allocate(System.Int32,System.Boolean)">
            <summary>
            构建一个capacity长度的字节缓存区ByteBuffer对象
            </summary>
            <param name="capacity">初始容量</param>
            <param name="fromPool">
            true表示获取一个池化的ByteBuffer对象，池化的对象必须在调用Dispose后才会推入池中，此方法为线程安全的。
            当为true时，从池中获取的对象的实际capacity值。
            </param>
            <returns>ByteBuffer对象</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Allocate(System.Byte[],System.Boolean)">
            <summary>
            构建一个以bytes为字节缓存区的ByteBuffer对象，一般不推荐使用
            </summary>
            <param name="bytes">初始字节数组</param>
            <param name="fromPool">
            true表示获取一个池化的ByteBuffer对象，池化的对象必须在调用Dispose后才会推入池中，此方法为线程安全的。
            </param>
            <returns>ByteBuffer对象</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.FixLength(System.Int32)">
            <summary>
            根据value，确定大于此length的最近的2次方数，如length=7，则返回值为8；length=12，则返回16
            </summary>
            <param name="value">参考容量</param>
            <returns>比参考容量大的最接近的2次方数</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Flip(System.Byte[])">
            <summary>
            翻转字节数组，如果本地字节序列为高字节序列，则进行翻转以转换为低字节序列
            </summary>
            <param name="bytes">待转为高字节序的字节数组</param>
            <returns>低字节序列的字节数组</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.FixSizeAndReset(System.Int32,System.Int32)">
            <summary>
            确定内部字节缓存数组的大小
            </summary>
            <param name="currLen">当前容量</param>
            <param name="futureLen">将来的容量</param>
            <returns>当前缓冲区的最大容量</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.EnsureWritableBytes(System.Int32)">
            <summary>
            确保有这么多字节可以用来写入
            </summary>
            <param name="minBytes"></param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将bytes字节数组从startIndex开始的length字节写入到此缓存区
            </summary>
            <param name="bytes">待写入的字节数据</param>
            <param name="startIndex">写入的开始位置</param>
            <param name="length">写入的长度</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteBytes(System.Byte[],System.Int32)">
            <summary>
            将字节数组中从0到length的元素写入缓存区
            </summary>
            <param name="bytes">待写入的字节数据</param>
            <param name="length">写入的长度</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteBytes(System.Byte[])">
            <summary>
            将字节数组全部写入缓存区
            </summary>
            <param name="bytes">待写入的字节数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Write(IFramework.Net.KCP.BufferQueue)">
            <summary>
            将一个ByteBuffer的有效字节区写入此缓存区中
            </summary>
            <param name="buffer">待写入的字节缓存区</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteShort(System.Int16)">
            <summary>
            写入一个int16数据
            </summary>
            <param name="value">short数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteUshort(System.UInt16)">
            <summary>
            写入一个uint16数据
            </summary>
            <param name="value">ushort数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteInt(System.Int32)">
            <summary>
            写入一个int32数据
            </summary>
            <param name="value">int数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteUint(System.UInt32)">
            <summary>
            写入一个uint32数据
            </summary>
            <param name="value">uint数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteLong(System.Int64)">
            <summary>
            写入一个int64数据
            </summary>
            <param name="value">long数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteUlong(System.UInt64)">
            <summary>
            写入一个uint64数据
            </summary>
            <param name="value">ulong数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteFloat(System.Single)">
            <summary>
            写入一个float数据
            </summary>
            <param name="value">float数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteByte(System.Byte)">
            <summary>
            写入一个byte数据
            </summary>
            <param name="value">byte数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteByte(System.Int32)">
            <summary>
            写入一个byte数据
            </summary>
            <param name="value">byte数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteDouble(System.Double)">
            <summary>
            写入一个double类型数据
            </summary>
            <param name="value">double数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteChar(System.Char)">
            <summary>
            写入一个字符
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteBoolean(System.Boolean)">
            <summary>
            写入一个布尔型数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadByte">
            <summary>
            读取一个字节
            </summary>
            <returns>字节数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Get(System.Int32,System.Int32)">
            <summary>
            获取从index索引处开始len长度的字节
            </summary>
            <param name="index"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Read(System.Int32)">
            <summary>
            从读取索引位置开始读取len长度的字节数组
            </summary>
            <param name="len">待读取的字节长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadUshort">
            <summary>
            读取一个uint16数据
            </summary>
            <returns>ushort数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadShort">
            <summary>
            读取一个int16数据
            </summary>
            <returns>short数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadUint">
            <summary>
            读取一个uint32数据
            </summary>
            <returns>uint数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadInt">
            <summary>
            读取一个int32数据
            </summary>
            <returns>int数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadUlong">
            <summary>
            读取一个uint64数据
            </summary>
            <returns>ulong数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadLong">
            <summary>
            读取一个long数据
            </summary>
            <returns>long数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadFloat">
            <summary>
            读取一个float数据
            </summary>
            <returns>float数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadDouble">
            <summary>
            读取一个double数据
            </summary>
            <returns>double数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadChar">
            <summary>
            读取一个字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadBoolean">
            <summary>
            读取布尔型数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从读取索引位置开始读取len长度的字节到disbytes目标字节数组中
            </summary>
            <param name="disbytes">读取的字节将存入此字节数组</param>
            <param name="disstart">目标字节数组的写入索引</param>
            <param name="len">读取的长度</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetByte(System.Int32)">
            <summary>
            获取一个字节
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetByte">
            <summary>
            获取一个字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetDouble(System.Int32)">
            <summary>
            获取一个双精度浮点数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetDouble">
            <summary>
            获取一个双精度浮点数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetFloat(System.Int32)">
            <summary>
            获取一个浮点数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetFloat">
            <summary>
            获取一个浮点数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetLong(System.Int32)">
            <summary>
            获取一个长整形数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetLong">
            <summary>
            获取一个长整形数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetUlong(System.Int32)">
            <summary>
            获取一个长整形数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetUlong">
            <summary>
            获取一个长整形数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetInt(System.Int32)">
            <summary>
            获取一个整形数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetInt">
            <summary>
            获取一个整形数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetUint(System.Int32)">
            <summary>
            获取一个整形数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetUint">
            <summary>
            获取一个整形数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetShort(System.Int32)">
            <summary>
            获取一个短整形数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetShort">
            <summary>
            获取一个短整形数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetUshort(System.Int32)">
            <summary>
            获取一个短整形数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetUshort">
            <summary>
            获取一个短整形数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetChar(System.Int32)">
            <summary>
            获取一个char数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetChar">
            <summary>
            获取一个char数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetBoolean(System.Int32)">
            <summary>
            获取一个布尔数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetBoolean">
            <summary>
            获取一个布尔数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.DiscardReadBytes">
            <summary>
            清除已读字节并重建缓存区
            </summary>
        </member>
        <member name="P:IFramework.Net.KCP.BufferQueue.reader">
            <summary>
            设置/获取读指针位置
            </summary>
        </member>
        <member name="P:IFramework.Net.KCP.BufferQueue.writer">
            <summary>
            设置/获取写指针位置
            </summary>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.MarkReaderIndex">
            <summary>
            标记读取的索引位置
            </summary>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.MarkWriterIndex">
            <summary>
            标记写入的索引位置
            </summary>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ResetReaderIndex">
            <summary>
            将读取的索引位置重置为标记的读取索引位置
            </summary>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ResetWriterIndex">
            <summary>
            将写入的索引位置重置为标记的写入索引位置
            </summary>
        </member>
        <member name="P:IFramework.Net.KCP.BufferQueue.canRead">
            <summary>
            可读的有效字节数
            </summary>
            <returns>可读的字节数</returns>
        </member>
        <member name="P:IFramework.Net.KCP.BufferQueue.canWrite">
            <summary>
            可写的剩余空间数
            </summary>
            <returns>可写的字节数</returns>
        </member>
        <member name="P:IFramework.Net.KCP.BufferQueue.capacity">
            <summary>
            获取缓存区容量大小
            </summary>
            <returns>缓存区容量</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ToArray">
            <summary>
            获取可读的字节数组
            </summary>
            <returns>字节数据</returns>
        </member>
        <member name="T:IFramework.Net.KCP.BufferQueue.DataType">
            <summary>
            简单的数据类型
            </summary>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteValue(System.Int32,IFramework.Net.KCP.BufferQueue.DataType)">
            <summary>
            写入一个数据
            </summary>
            <param name="value">待写入的数据</param>
            <param name="type">待写入的数据类型</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadValue(IFramework.Net.KCP.BufferQueue.DataType)">
            <summary>
            读取一个值，值类型根据type决定，int或short或byte
            </summary>
            <param name="type">值类型</param>
            <returns>int数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteUTF8String(System.String,IFramework.Net.KCP.BufferQueue.DataType)">
            <summary>
            写入一个UTF-8字符串，UTF-8字符串无高低字节序问题
            <para>写入缓冲区的结构为字符串字节长度（类型由lenType指定） + 字符串字节数组</para>
            </summary>
            <param name="content">待写入的字符串</param>
            <param name="lenType">写入的字符串长度类型</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteUTF(System.String)">
            <summary>
            写入以short表示的字符串字节长度和字符串字节数据
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadUTF8String(System.Int32)">
            <summary>
            读取一个UTF-8字符串，UTF-8字符串无高低字节序问题
            </summary>
            <param name="len">需读取的字符串长度</param>
            <returns>字符串</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadUTF8String(IFramework.Net.KCP.BufferQueue.DataType)">
            <summary>
            读取一个UTF-8字符串，UTF-8字符串无高低字节序问题
            </summary>
            <param name="lenType">字符串长度类型</param>
            <returns>字符串</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadUTF">
            <summary>
            读取short类型的字符串字节长度，然后根据此长度读取对应数量的字节数据后转为字符串
            </summary>
            <returns>UTF-8字符串</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Copy">
            <summary>
            复制一个对象，具有与原对象相同的数据，不改变原对象的数据，不包括已读数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Clone">
            <summary>
            深度复制，具有与原对象相同的数据，不改变原对象的数据，包括已读数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ForEach(System.Action{System.Byte})">
            <summary>
            遍历所有的字节数据
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Clear">
            <summary>
            清空此对象，但保留字节缓存数组（空数组）
            </summary>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Dispose">
            <summary>
            释放对象，清除字节缓存数组，如果此对象为可池化，那么调用此方法将会把此对象推入到池中等待下次调用
            </summary>
        </member>
        <member name="P:IFramework.Net.KCP.Kcp.Mss">
            <summary>
            每个分片最大  大小
            </summary>
        </member>
        <member name="P:IFramework.Net.SocketBufferManager.BlockSize">
            <summary>
            块缓冲区大小
            </summary>
        </member>
        <member name="M:IFramework.Net.SocketBufferManager.#ctor(System.Int32,System.Int32)">
            <summary>
            缓冲区管理构造
            </summary>
            <param name="maxCounts"></param>
            <param name="blockSize"></param>
        </member>
        <member name="M:IFramework.Net.SocketBufferManager.SetBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            设置缓冲区
            </summary>
            <param name="agrs"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.SocketBufferManager.WriteBuffer(System.Net.Sockets.SocketAsyncEventArgs,System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入缓冲区
            </summary>
            <param name="agrs"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="cnt"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.SocketBufferManager.FreeBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            释放缓冲区
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:IFramework.Net.SocketBufferManager.BufferToSegments(System.Byte[],System.Int32,System.Int32)">
            <summary>
            自动按发送缓冲区的块大小分多次包
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.NetProtocolProvider.Decode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            解码
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.NetProtocolProvider.Encode(IFramework.Packets.Packet)">
            <summary>
            编码
            </summary>
            <param name="pkg"></param>
            <returns></returns>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpClientProvider.SentCallback">
            <summary>
            发送回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpClientProvider.RecievedCallback">
            <summary>
            接收数据回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpClientProvider.ReceivedOffsetCallback">
            <summary>
            接受数据回调，返回缓冲区和偏移量
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpClientProvider.DisconnectedCallback">
            <summary>
            断开连接回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpClientProvider.ConnectedCallback">
            <summary>
            连接回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpClientProvider.IsConnected">
            <summary>
            是否连接状态
            </summary>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.#ctor(System.Int32,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="chunkBufferSize">发送块缓冲区大小</param>
            <param name="bufferNumber">缓冲发送数</param>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.Connect(System.Int32,System.String)">
            <summary>
            异步建立连接
            </summary>
            <param name="port"></param>
            <param name="ip"></param>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.ConnectTo(System.Int32,System.String)">
            <summary>
            异步等待连接返回结果
            </summary>
            <param name="port"></param>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.ConnectSync(System.Int32,System.String)">
            <summary>
            同步连接
            </summary>
            <param name="port"></param>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.Send(IFramework.Net.SegmentOffset,System.Boolean)">
            <summary>
            根据偏移发送缓冲区数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.SendFile(System.String)">
            <summary>
            发送文件
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.SendSync(IFramework.Net.SegmentOffset,IFramework.Net.SegmentOffset)">
            <summary>
            同步发送并接收数据,不设置receiveSegment 默认为只发数据
            </summary>
            <param name="buffer"></param>
            <param name="receiveBlock"></param>
            <param name="recAct"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.ReceiveSync(IFramework.Net.SegmentOffset,System.Action{IFramework.Net.SegmentOffset})">
            <summary>
            同步接收数据
            </summary>
            <param name="receiveBlock"></param>
            <param name="receivedAction"></param>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.Disconnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpServerProvider.AcceptedCallback">
            <summary>
            接受连接回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpServerProvider.ReceivedCallback">
            <summary>
            接收数据回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpServerProvider.ReceivedOffsetCallback">
             <summary>
            接收数据缓冲区，返回缓冲区的实际偏移和数量
             </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpServerProvider.SentCallback">
            <summary>
            发送回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpServerProvider.DisconnectedCallback">
            <summary>
            断开连接回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpServerProvider.NumberOfConnections">
            <summary>
            连接数
            </summary>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpServerProvider.#ctor(System.Int32,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="maxConnections">最大连接数</param>
            <param name="chunkBufferSize">接收块缓冲区</param>
        </member>
        <member name="E:IFramework.Net.Udp.SocketReceive.OnReceived">
            <summary>
            接收事件
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.SocketReceive.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="port">本机接收数据端口</param>
            <param name="bufferSize">接收缓冲区大小</param>
        </member>
        <member name="M:IFramework.Net.Udp.SocketReceive.StartReceive">
            <summary>
            开始接收数据
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.SocketReceive.StopReceive">
            <summary>
            停止接收数据
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.SocketReceive.SocketArgs_Completed(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            接收完成事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:IFramework.Net.Udp.SocketReceive.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            处理接收信息
            </summary>
            <param name="arg"></param>
        </member>
        <member name="E:IFramework.Net.Udp.SocketSend.SentEventHandler">
            <summary>
            发送事件回调
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.SocketSend.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化发送对象
            </summary>
            <param name="maxCountClient">客户端最大数</param>
        </member>
        <member name="M:IFramework.Net.Udp.SocketSend.Send(IFramework.Net.SegmentOffset,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            发送数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="waiting"></param>
            <param name="remoteEP"></param>
        </member>
        <member name="M:IFramework.Net.Udp.SocketSend.SendSync(IFramework.Net.SegmentOffset,System.Net.IPEndPoint)">
            <summary>
            同步发送数据
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="remoteEP"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.Udp.SocketSend.DisposeSocketPool">
            <summary>
            释放缓冲池
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.SocketSend.ProcessSent(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            处理发送的数据
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:IFramework.Net.Udp.SocketSend.ClientSocket_Completed(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            完成发送事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:IFramework.Net.Udp.UdpClientProvider.ReceivedCallbackHandler">
            <summary>
            接收回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Udp.UdpClientProvider.SentCallbackHandler">
            <summary>
            发送回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Udp.UdpClientProvider.ReceivedOffsetHandler">
            <summary>
            接收缓冲区回调
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.UdpClientProvider.#ctor(System.Int32,System.Int32)">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.UdpClientProvider.Connect(System.Int32,System.String)">
            <summary>
            尝试连接
            </summary>
            <param name="port"></param>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.Udp.UdpClientProvider.SendSync(IFramework.Net.SegmentOffset,IFramework.Net.SegmentOffset)">
            <summary>
            同步发送
            </summary>
            <param name="buffer"></param>
            <param name="recAct"></param>
            <param name="recBufferSize"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.Udp.UdpClientProvider.ReceiveSync(IFramework.Net.SegmentOffset,System.Action{IFramework.Net.SegmentOffset})">
            <summary>
            同步接收
            </summary>
            <param name="recAct"></param>
            <param name="recBufferSize"></param>
        </member>
        <member name="M:IFramework.Net.Udp.UdpClientProvider.StartReceive">
            <summary>
            开始接收数据
            </summary>
            <param name="remoteEP"></param>
        </member>
        <member name="M:IFramework.Net.Udp.UdpClientProvider.Initialize">
            <summary>
            初始化对象
            </summary>
            <param name="recBufferSize"></param>
            <param name="port"></param>
        </member>
        <member name="P:IFramework.Net.Udp.UdpServerProvider.ReceivedCallbackHandler">
            <summary>
            接收事件响应回调
            </summary>
        </member>
        <member name="P:IFramework.Net.Udp.UdpServerProvider.SentCallbackHandler">
            <summary>
            发送事件响应回调
            </summary>
        </member>
        <member name="P:IFramework.Net.Udp.UdpServerProvider.DisconnectedCallbackHandler">
            <summary>
            断开连接事件回调
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.UdpServerProvider.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.UdpServerProvider.Start(System.Int32)">
            <summary>
            启动服务
            </summary>
            <param name="port">接收数据端口</param>
            <param name="recBufferSize">接收缓冲区</param>
            <param name="maxConnectionCount">最大客户端连接数</param>
        </member>
        <member name="M:IFramework.Net.Udp.UdpServerProvider.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.AcceptInfo.SecWebSocketAccept">
            <summary>
            接入访问验证码
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.AcceptInfo.SecWebSocketLocation">
            <summary>
            客户端来源
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.AcceptInfo.SecWebSocketOrigin">
            <summary>
            服务端来源
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.AccessInfo.Host">
            <summary>
            连接主机
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.AccessInfo.Origin">
            <summary>
            连接源
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.AccessInfo.SecWebSocketExtensions">
            <summary>
            安全扩展
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.AccessInfo.SecWebSocketKey">
            <summary>
            安全密钥
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.AccessInfo.SecWebSocketVersion">
            <summary>
            安全版本
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.BaseInfo.HttpProto">
            <summary>
            http连接协议
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.BaseInfo.Connection">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.BaseInfo.Upgrade">
            <summary>
            连接方式
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.DataFrame.IsEof">
            <summary>
            如果为true则该消息为消息尾部,如果false为零则还有后续数据包;
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.DataFrame.Rsv1">
            <summary>
            RSV1,RSV2,RSV3,各1位，用于扩展定义的,如果没有扩展约定的情况则必须为0
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.DataFrame.OpCode">
             <summary>
            0x0表示附加数据帧
            0x1表示文本数据帧
            0x2表示二进制数据帧
            0x3-7暂时无定义，为以后的非控制帧保留
            0x8表示连接关闭
            0x9表示ping
            0xA表示pong
            0xB-F暂时无定义，为以后的控制帧保留
             </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.DataFrame.Mask">
            <summary>
            true使用掩码解析消息
            </summary>
        </member>
        <member name="M:IFramework.Net.WebSocket.WSClientProvider.Connect(System.String)">
            <summary>
            wsUrl:ws://ip:port
            </summary>
            <param name="wsUrl"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.NodeAction.ActionNode">
            <summary>
            节点
            </summary>
        </member>
        <member name="P:IFramework.NodeAction.ActionNode.isDone">
            <summary>
            是否完成
            </summary>
        </member>
        <member name="P:IFramework.NodeAction.ActionNode.autoRecyle">
            <summary>
            自动回收
            </summary>
        </member>
        <member name="M:IFramework.NodeAction.ActionNode.OnMoveNext">
            <summary>
            下一帧
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNode.OnNodeReset">
            <summary>
            调用时机：repeat 节点完成一次
            </summary>
        </member>
        <member name="M:IFramework.NodeAction.ActionNode.OnDispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:IFramework.NodeAction.ActionNode.Config(System.Boolean)">
            <summary>
            设置自动回收
            </summary>
            <param name="autoRecyle"></param>
        </member>
        <member name="M:IFramework.NodeAction.ActionNode.OnDataReset">
            <summary>
            数据重置
            </summary>
        </member>
        <member name="M:IFramework.NodeAction.ActionNode.OnRecyle">
            <summary>
            被回收时
            </summary>
        </member>
        <member name="M:IFramework.NodeAction.ActionNode.OnBegin">
            <summary>
            开始时
            </summary>
        </member>
        <member name="M:IFramework.NodeAction.ActionNode.OnCompelete">
            <summary>
            结束时
            </summary>
        </member>
        <member name="T:IFramework.NodeAction.ActionNodeExtension">
            <summary>
            静态扩展
            </summary>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.ActionEnumerator``1(``0)">
            <summary>
            获取节点运行的 迭代器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.Run``1(``0,IFramework.Modules.Coroutine.ICoroutineModule)">
            <summary>
            运行于 ICoroutineModule 上
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="moudle"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.Run``1(``0)">
            <summary>
            直接运行于环境默认的上
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.Sequence(System.Object,IFramework.EnvironmentType,System.Boolean)">
            <summary>
            开启顺序节点
            </summary>
            <param name="self"></param>
            <param name="envType"></param>
            <param name="autoRecyle"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.Sequence(System.Object,IFramework.IEnvironment,System.Boolean)">
            <summary>
            开启顺序节点
            </summary>
            <param name="self"></param>
            <param name="env"></param>
            <param name="autoRecyle"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.OnCompelete``1(``0,System.Action{``0})">
            <summary>
            结束回调
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.OnBegin``1(``0,System.Action{``0})">
            <summary>
            开始回调
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.OnRecyle``1(``0,System.Action{``0})">
            <summary>
            被回收回调
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.OnCompelete``1(``0,System.Action)">
            <summary>
            结束回调
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.OnBegin``1(``0,System.Action)">
            <summary>
            开始回调
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.OnRecyle``1(``0,System.Action)">
            <summary>
            被回收回调
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.TimeSpan``1(``0,System.TimeSpan,System.Boolean)">
            <summary>
            开启一个时间节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="time"></param>
            <param name="autoRecyle"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.Until``1(``0,System.Func{System.Boolean},System.Boolean)">
            <summary>
            开启一个条件结束节点,直到条件成立
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="condition"></param>
            <param name="autoRecyle"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.While``1(``0,System.Func{System.Boolean},System.Action,System.Boolean)">
            <summary>
            开启一个条件运行节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="condition"></param>
            <param name="body"></param>
            <param name="autoRecyle"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.Event``1(``0,System.Action,System.Boolean)">
            <summary>
            开启一个事件节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="body"></param>
            <param name="autoRecyle"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.Condition``1(``0,System.Func{System.Boolean},System.Action,System.Boolean)">
            <summary>
            开启一个 IF 节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="condition"></param>
            <param name="body"></param>
            <param name="autoRecyle"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.Frame``1(``0,System.Int32,System.Boolean)">
            <summary>
            开启一个帧节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="frame"></param>
            <param name="autoRecyle"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.DoWhile``1(``0,System.Func{System.Boolean},System.Action,System.Boolean)">
            <summary>
            开启一个do while节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="condition"></param>
            <param name="body"></param>
            <param name="autoRecyle"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.For``1(``0,System.Action,System.Func{System.Boolean},System.Action,System.Action,System.Boolean)">
            <summary>
            开启一个 for 节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="initializer"></param>
            <param name="condition"></param>
            <param name="iterator"></param>
            <param name="body"></param>
            <param name="autoRecyle"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.Repeat``1(``0,System.Action{IFramework.NodeAction.IRepeatNode},System.Int32,System.Boolean)">
            <summary>
            开启一个重复运行节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="action"></param>
            <param name="repeat"></param>
            <param name="autoRecyle"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.Sequence``1(``0,System.Action{IFramework.NodeAction.ISequenceNode},System.Boolean)">
            <summary>
            开启一个 顺序运行节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="action"></param>
            <param name="autoRecyle"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.Spawn``1(``0,System.Action{IFramework.NodeAction.ISpawnNode},System.Boolean)">
            <summary>
            开启一个并行运行节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="action"></param>
            <param name="autoRecyle"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.LastNode``1(``0,System.Action{IFramework.NodeAction.IActionNode})">
            <summary>
            获取容器节点中的最后一个
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.NodeAction.ActionNodeExtension.LastNode``2(``0,System.Action{``1})">
            <summary>
            获取容器节点中的最后一个
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T1"></typeparam>
            <param name="self"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.NodeAction.ContainerNode">
            <summary>
            容器节点
            </summary>
        </member>
        <member name="P:IFramework.NodeAction.ContainerNode.count">
            <summary>
            子级节点个数
            </summary>
        </member>
        <member name="P:IFramework.NodeAction.ContainerNode.last">
            <summary>
            子节点最后一个
            </summary>
        </member>
        <member name="F:IFramework.NodeAction.ContainerNode.nodeList">
            <summary>
            所有子节点
            </summary>
        </member>
        <member name="M:IFramework.NodeAction.ContainerNode.Append(IFramework.NodeAction.ActionNode)">
            <summary>
            添加子节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:IFramework.NodeAction.ContainerNode.OnRecyle">
            <summary>
            回收时
            </summary>
        </member>
        <member name="M:IFramework.NodeAction.ContainerNode.OnNodeReset">
            <summary>
            调用时机：repeat 节点完成一次
            </summary>
        </member>
        <member name="T:IFramework.NodeAction.IActionNode">
            <summary>
            节点
            </summary>
        </member>
        <member name="P:IFramework.NodeAction.IActionNode.isDone">
            <summary>
            是否完成
            </summary>
        </member>
        <member name="P:IFramework.NodeAction.IActionNode.autoRecyle">
            <summary>
            自动回收
            </summary>
        </member>
        <member name="T:IFramework.NodeAction.IConditionNode">
            <summary>
            条件节点
            </summary>
        </member>
        <member name="T:IFramework.NodeAction.IContainerNode">
            <summary>
            容器节点
            </summary>
        </member>
        <member name="P:IFramework.NodeAction.IContainerNode.last">
            <summary>
            最后一个节点
            </summary>
        </member>
        <member name="T:IFramework.NodeAction.IEventNode">
            <summary>
            事件节点
            </summary>
        </member>
        <member name="T:IFramework.NodeAction.IForNode">
            <summary>
            for 节点
            </summary>
        </member>
        <member name="T:IFramework.NodeAction.IFrameNode">
            <summary>
            帧节点
            </summary>
        </member>
        <member name="T:IFramework.NodeAction.IRepeatNode">
            <summary>
            重复节点
            </summary>
        </member>
        <member name="P:IFramework.NodeAction.IRepeatNode.repeat">
            <summary>
            循环次数
            </summary>
        </member>
        <member name="T:IFramework.NodeAction.ISequenceNode">
            <summary>
            顺序节点
            </summary>
        </member>
        <member name="T:IFramework.NodeAction.ISpawnNode">
            <summary>
            并行节点
            </summary>
        </member>
        <member name="T:IFramework.NodeAction.ITimeSpanNode">
            <summary>
            时间节点
            </summary>
        </member>
        <member name="T:IFramework.NodeAction.IUntilNode">
            <summary>
            等待条件成立节点
            </summary>
        </member>
        <member name="T:IFramework.NodeAction.IWhileNode">
            <summary>
            当条件不成立节点
            </summary>
        </member>
        <member name="T:IFramework.ActivatorCreatePool`1">
            <summary>
            Activator 创建实例 对现池
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IFramework.ActivatorCreatePool`1.CreatNew(IFramework.IEventArgs)">
            <summary>
            创建
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Queue.FastPriorityQueue`1">
            <summary>
            优先级队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.#ctor(System.Int32)">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="capcity">The max nodes ever allowed to be enqueued (going over this will cause undefined behavior)</param>
        </member>
        <member name="P:IFramework.Queue.FastPriorityQueue`1.count">
            <summary>
            Returns the number of nodes in the queue.
            O(1)
            </summary>
        </member>
        <member name="P:IFramework.Queue.FastPriorityQueue`1.capcity">
            <summary>
            Returns the maximum number of items that can be enqueued at once in this queue.  Once you hit this number (ie. once Count == MaxSize),
            attempting to enqueue another item will cause undefined behavior.  O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.Clear">
            <summary>
            Removes every node from the queue.
            O(n) (So, don't do this often!)
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.Contains(`0)">
            <summary>
            Returns (in O(1)!) whether the given node is in the queue.
            If node is or has been previously added to another queue, the result is undefined unless oldQueue.ResetNode(node) has been called
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.Enqueue(`0,System.Single)">
            <summary>
            Enqueue a node to the priority queue.  Lower values are placed in front. Ties are broken arbitrarily.
            If the queue is full, the result is undefined.
            If the node is already enqueued, the result is undefined.
            If node is or has been previously added to another queue, the result is undefined unless oldQueue.ResetNode(node) has been called
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.HasHigherPriority(`0,`0)">
            <summary>
            Returns true if 'higher' has higher priority than 'lower', false otherwise.
            Note that calling HasHigherPriority(node, node) (ie. both arguments the same node) will return false
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.HasHigherOrEqualPriority(`0,`0)">
            <summary>
            Returns true if 'higher' has higher priority than 'lower', false otherwise.
            Note that calling HasHigherOrEqualPriority(node, node) (ie. both arguments the same node) will return true
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.Dequeue">
            <summary>
            Removes the head of the queue and returns it.
            If queue is empty, result is undefined
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.Resize(System.Int32)">
            <summary>
            Resize the queue so it can accept more nodes.  All currently enqueued nodes are remain.
            Attempting to decrease the queue size to a size too small to hold the existing nodes results in undefined behavior
            O(n)
            </summary>
        </member>
        <member name="P:IFramework.Queue.FastPriorityQueue`1.first">
            <summary>
            Returns the head of the queue, without removing it (use Dequeue() for that).
            If the queue is empty, behavior is undefined.
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.UpdatePriority(`0,System.Single)">
            <summary>
            This method must be called on a node every time its priority changes while it is in the queue.  
            <b>Forgetting to call this method will result in a corrupted queue!</b>
            Calling this method on a node not in the queue results in undefined behavior
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.Remove(`0)">
            <summary>
            Removes a node from the queue.  The node does not need to be the head of the queue.  
            If the node is not in the queue, the result is undefined.  If unsure, check Contains() first
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.ResetNode(`0)">
            <summary>
            By default, nodes that have been previously added to one queue cannot be added to another queue.
            If you need to do this, please call originalQueue.ResetNode(node) before attempting to add it in the new queue
            If the node is currently in the queue or belongs to another queue, the result is undefined
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Queue.FastPriorityQueueNode">
            <summary>
            优先级队列节点
            </summary>
        </member>
        <member name="P:IFramework.Queue.FastPriorityQueueNode.priority">
            <summary>
            The Priority to insert this node at.
            Cannot be manually edited - see queue.Enqueue() and queue.UpdatePriority() instead
            </summary>
        </member>
        <member name="P:IFramework.Queue.FastPriorityQueueNode.position">
            <summary>
            Represents the current position in the queue
            </summary>
        </member>
        <member name="T:IFramework.Queue.GenericPriorityQueue`2">
            <summary>
            泛型优先级队列
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TPriority"></typeparam>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.#ctor(System.Int32)">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="maxNodes">The max nodes ever allowed to be enqueued (going over this will cause undefined behavior)</param>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`1})">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="maxNodes">The max nodes ever allowed to be enqueued (going over this will cause undefined behavior)</param>
            <param name="comparer">The comparer used to compare TPriority values.</param>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.#ctor(System.Int32,System.Comparison{`1})">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="maxNodes">The max nodes ever allowed to be enqueued (going over this will cause undefined behavior)</param>
            <param name="comparer">The comparison function to use to compare TPriority values</param>
        </member>
        <member name="P:IFramework.Queue.GenericPriorityQueue`2.count">
            <summary>
            Returns the number of nodes in the queue.
            O(1)
            </summary>
        </member>
        <member name="P:IFramework.Queue.GenericPriorityQueue`2.capcity">
            <summary>
            Returns the maximum number of items that can be enqueued at once in this queue.  Once you hit this number (ie. once Count == MaxSize),
            attempting to enqueue another item will cause undefined behavior.  O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.Clear">
            <summary>
            Removes every node from the queue.
            O(n) (So, don't do this often!)
            </summary>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.Contains(`0)">
            <summary>
            Returns (in O(1)!) whether the given node is in the queue.
            If node is or has been previously added to another queue, the result is undefined unless oldQueue.ResetNode(node) has been called
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Enqueue a node to the priority queue.  Lower values are placed in front. Ties are broken by first-in-first-out.
            If the queue is full, the result is undefined.
            If the node is already enqueued, the result is undefined.
            If node is or has been previously added to another queue, the result is undefined unless oldQueue.ResetNode(node) has been called
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.HasHigherPriority(`0,`0)">
            <summary>
            Returns true if 'higher' has higher priority than 'lower', false otherwise.
            Note that calling HasHigherPriority(node, node) (ie. both arguments the same node) will return false
            </summary>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.Dequeue">
            <summary>
            Removes the head of the queue (node with minimum priority; ties are broken by order of insertion), and returns it.
            If queue is empty, result is undefined
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.Resize(System.Int32)">
            <summary>
            Resize the queue so it can accept more nodes.  All currently enqueued nodes are remain.
            Attempting to decrease the queue size to a size too small to hold the existing nodes results in undefined behavior
            O(n)
            </summary>
        </member>
        <member name="P:IFramework.Queue.GenericPriorityQueue`2.first">
            <summary>
            Returns the head of the queue, without removing it (use Dequeue() for that).
            If the queue is empty, behavior is undefined.
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.UpdatePriority(`0,`1)">
            <summary>
            This method must be called on a node every time its priority changes while it is in the queue.  
            <b>Forgetting to call this method will result in a corrupted queue!</b>
            Calling this method on a node not in the queue results in undefined behavior
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.Remove(`0)">
            <summary>
            Removes a node from the queue.  The node does not need to be the head of the queue.  
            If the node is not in the queue, the result is undefined.  If unsure, check Contains() first
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.ResetNode(`0)">
            <summary>
            By default, nodes that have been previously added to one queue cannot be added to another queue.
            If you need to do this, please call originalQueue.ResetNode(node) before attempting to add it in the new queue
            </summary>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Queue.GenericPriorityQueueNode`1">
            <summary>
            泛型优先级队列节点
            </summary>
            <typeparam name="TPriority"></typeparam>
        </member>
        <member name="P:IFramework.Queue.GenericPriorityQueueNode`1.priority">
            <summary>
            The Priority to insert this node at.
            Cannot be manually edited - see queue.Enqueue() and queue.UpdatePriority() instead
            </summary>
        </member>
        <member name="P:IFramework.Queue.GenericPriorityQueueNode`1.position">
            <summary>
            Represents the current position in the queue
            </summary>
        </member>
        <member name="P:IFramework.Queue.GenericPriorityQueueNode`1.insertPosition">
            <summary>
            Represents the order the node was inserted in
            </summary>
        </member>
        <member name="M:IFramework.Queue.IFixedSizePriorityQueue`2.Resize(System.Int32)">
            <summary>
            Resize the queue so it can accept more nodes.  All currently enqueued nodes are remain.
            Attempting to decrease the queue size to a size too small to hold the existing nodes results in undefined behavior
            </summary>
        </member>
        <member name="P:IFramework.Queue.IFixedSizePriorityQueue`2.capcity">
            <summary>
            Returns the maximum number of items that can be enqueued at once in this queue.  Once you hit this number (ie. once Count == MaxSize),
            attempting to enqueue another item will cause undefined behavior.
            </summary>
        </member>
        <member name="M:IFramework.Queue.IFixedSizePriorityQueue`2.ResetNode(`0)">
            <summary>
            By default, nodes that have been previously added to one queue cannot be added to another queue.
            If you need to do this, please call originalQueue.ResetNode(node) before attempting to add it in the new queue
            </summary>
        </member>
        <member name="T:IFramework.Queue.IPriorityQueue`2">
            <summary>
            The IPriorityQueue interface.  This is mainly here for purists, and in case I decide to add more implementations later.
            For speed purposes, it is actually recommended that you *don't* access the priority queue through this interface, since the JIT can
            (theoretically?) optimize method calls from concrete-types slightly better.
            </summary>
        </member>
        <member name="M:IFramework.Queue.IPriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Enqueue a node to the priority queue.  Lower values are placed in front. Ties are broken by first-in-first-out.
            See implementation for how duplicates are handled.
            </summary>
        </member>
        <member name="M:IFramework.Queue.IPriorityQueue`2.Dequeue">
            <summary>
            Removes the head of the queue (node with minimum priority; ties are broken by order of insertion), and returns it.
            </summary>
        </member>
        <member name="M:IFramework.Queue.IPriorityQueue`2.Clear">
            <summary>
            Removes every node from the queue.
            </summary>
        </member>
        <member name="M:IFramework.Queue.IPriorityQueue`2.Contains(`0)">
            <summary>
            Returns whether the given node is in the queue.
            </summary>
        </member>
        <member name="M:IFramework.Queue.IPriorityQueue`2.Remove(`0)">
            <summary>
            Removes a node from the queue.  The node does not need to be the head of the queue.  
            </summary>
        </member>
        <member name="M:IFramework.Queue.IPriorityQueue`2.UpdatePriority(`0,`1)">
            <summary>
            Call this method to change the priority of a node.  
            </summary>
        </member>
        <member name="P:IFramework.Queue.IPriorityQueue`2.first">
            <summary>
            Returns the head of the queue, without removing it (use Dequeue() for that).
            </summary>
        </member>
        <member name="P:IFramework.Queue.IPriorityQueue`2.count">
            <summary>
            Returns the number of nodes in the queue.
            </summary>
        </member>
        <member name="T:IFramework.Queue.SimplePriorityQueue`2">
            <summary>
            简易优先级队列
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TPriority"></typeparam>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.#ctor">
            <summary>
            Instantiate a new Priority Queue
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.#ctor(System.Collections.Generic.IComparer{`1})">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="priorityComparer">The comparer used to compare TPriority values.  Defaults to Comparer&lt;TPriority&gt;.default</param>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.#ctor(System.Comparison{`1})">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="priorityComparer">The comparison function to use to compare TPriority values</param>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Instantiate a new Priority Queue       
            </summary>
            <param name="itemEquality">The equality comparison function to use to compare TItem values</param>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.#ctor(System.Collections.Generic.IComparer{`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="priorityComparer">The comparer used to compare TPriority values.  Defaults to Comparer&lt;TPriority&gt;.default</param>
            <param name="itemEquality">The equality comparison function to use to compare TItem values</param>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.#ctor(System.Comparison{`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="priorityComparer">The comparison function to use to compare TPriority values</param>
            <param name="itemEquality">The equality comparison function to use to compare TItem values</param>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.GetExistingNode(`0)">
            <summary>
            Given an item of type T, returns the existing SimpleNode in the queue
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.AddToNodeCache(IFramework.Queue.SimplePriorityQueue{`0,`1}.SimpleNode)">
            <summary>
            Adds an item to the Node-cache to allow for many methods to be O(1) or O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.RemoveFromNodeCache(IFramework.Queue.SimplePriorityQueue{`0,`1}.SimpleNode)">
            <summary>
            Removes an item to the Node-cache to allow for many methods to be O(1) or O(log n) (assuming no duplicates)
            </summary>
        </member>
        <member name="P:IFramework.Queue.SimplePriorityQueue`2.count">
            <summary>
            Returns the number of nodes in the queue.
            O(1)
            </summary>
        </member>
        <member name="P:IFramework.Queue.SimplePriorityQueue`2.first">
            <summary>
            Returns the head of the queue, without removing it (use Dequeue() for that).
            Throws an exception when the queue is empty.
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.Clear">
            <summary>
            Removes every node from the queue.
            O(n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.Contains(`0)">
            <summary>
            Returns whether the given item is in the queue.
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.Dequeue">
            <summary>
            Removes the head of the queue (node with minimum priority; ties are broken by order of insertion), and returns it.
            If queue is empty, throws an exception
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.EnqueueNoLockOrCache(`0,`1)">
            <summary>
            Enqueue the item with the given priority, without calling lock(_queue) or AddToNodeCache(node)
            </summary>
            <param name="item"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Enqueue a node to the priority queue.  Lower values are placed in front. Ties are broken by first-in-first-out.
            This queue automatically resizes itself, so there's no concern of the queue becoming 'full'.
            Duplicates and null-values are allowed.
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.EnqueueWithoutDuplicates(`0,`1)">
            <summary>
            Enqueue a node to the priority queue if it doesn't already exist.  Lower values are placed in front. Ties are broken by first-in-first-out.
            This queue automatically resizes itself, so there's no concern of the queue becoming 'full'.  Null values are allowed.
            Returns true if the node was successfully enqueued; false if it already exists.
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.Remove(`0)">
            <summary>
            Removes an item from the queue.  The item does not need to be the head of the queue.  
            If the item is not in the queue, an exception is thrown.  If unsure, check Contains() first.
            If multiple copies of the item are enqueued, only the first one is removed. 
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.UpdatePriority(`0,`1)">
            <summary>
            Call this method to change the priority of an item.
            Calling this method on a item not in the queue will throw an exception.
            If the item is enqueued multiple times, only the first one will be updated.
            (If your requirements are complex enough that you need to enqueue the same item multiple times <i>and</i> be able
            to update all of them, please wrap your items in a wrapper class so they can be distinguished).
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.GetPriority(`0)">
            <summary>
            Returns the priority of the given item.
            Calling this method on a item not in the queue will throw an exception.
            If the item is enqueued multiple times, only the priority of the first will be returned.
            (If your requirements are complex enough that you need to enqueue the same item multiple times <i>and</i> be able
            to query all their priorities, please wrap your items in a wrapper class so they can be distinguished).
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.TryFirst(`0@)">
            Get the head of the queue, without removing it (use TryDequeue() for that).
            Useful for multi-threading, where the queue may become empty between calls to Contains() and First
            Returns true if successful, false otherwise
            O(1)
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.TryDequeue(`0@)">
            <summary>
            Removes the head of the queue (node with minimum priority; ties are broken by order of insertion), and sets it to first.
            Useful for multi-threading, where the queue may become empty between calls to Contains() and Dequeue()
            Returns true if successful; false if queue was empty
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.TryRemove(`0)">
            <summary>
            Attempts to remove an item from the queue.  The item does not need to be the head of the queue.  
            Useful for multi-threading, where the queue may become empty between calls to Contains() and Remove()
            Returns true if the item was successfully removed, false if it wasn't in the queue.
            If multiple copies of the item are enqueued, only the first one is removed. 
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.TryUpdatePriority(`0,`1)">
            <summary>
            Call this method to change the priority of an item.
            Useful for multi-threading, where the queue may become empty between calls to Contains() and UpdatePriority()
            If the item is enqueued multiple times, only the first one will be updated.
            (If your requirements are complex enough that you need to enqueue the same item multiple times <i>and</i> be able
            to update all of them, please wrap your items in a wrapper class so they can be distinguished).
            Returns true if the item priority was updated, false otherwise.
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.TryGetPriority(`0,`1@)">
            <summary>
            Attempt to get the priority of the given item.
            Useful for multi-threading, where the queue may become empty between calls to Contains() and GetPriority()
            If the item is enqueued multiple times, only the priority of the first will be returned.
            (If your requirements are complex enough that you need to enqueue the same item multiple times <i>and</i> be able
            to query all their priorities, please wrap your items in a wrapper class so they can be distinguished).
            Returns true if the item was found in the queue, false otherwise
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Queue.SimplePriorityQueue`1">
            <summary>
            A simplified priority queue implementation.  Is stable, auto-resizes, and thread-safe, at the cost of being slightly slower than
            FastPriorityQueue
            This class is kept here for backwards compatibility.  It's recommended you use SimplePriorityQueue&lt;TItem, TPriority&gt;
            </summary>
            <typeparam name="TItem">The type to enqueue</typeparam>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`1.#ctor">
            <summary>
            Instantiate a new Priority Queue
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`1.#ctor(System.Collections.Generic.IComparer{System.Single})">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="comparer">The comparer used to compare priority values.  Defaults to Comparer&lt;float&gt;.default</param>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`1.#ctor(System.Comparison{System.Single})">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="comparer">The comparison function to use to compare priority values</param>
        </member>
        <member name="T:IFramework.Queue.StablePriorityQueue`1">
            <summary>
            稳定优先级队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.#ctor(System.Int32)">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="capicty">The max nodes ever allowed to be enqueued (going over this will cause undefined behavior)</param>
        </member>
        <member name="P:IFramework.Queue.StablePriorityQueue`1.count">
            <summary>
            Returns the number of nodes in the queue.
            O(1)
            </summary>
        </member>
        <member name="P:IFramework.Queue.StablePriorityQueue`1.capcity">
            <summary>
            Returns the maximum number of items that can be enqueued at once in this queue.  Once you hit this number (ie. once Count == MaxSize),
            attempting to enqueue another item will cause undefined behavior.  O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.Clear">
            <summary>
            Removes every node from the queue.
            O(n) (So, don't do this often!)
            </summary>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.Contains(`0)">
            <summary>
            Returns (in O(1)!) whether the given node is in the queue.
            If node is or has been previously added to another queue, the result is undefined unless oldQueue.ResetNode(node) has been called
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.Enqueue(`0,System.Single)">
            <summary>
            Enqueue a node to the priority queue.  Lower values are placed in front. Ties are broken by first-in-first-out.
            If the queue is full, the result is undefined.
            If the node is already enqueued, the result is undefined.
            If node is or has been previously added to another queue, the result is undefined unless oldQueue.ResetNode(node) has been called
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.HasHigherPriority(`0,`0)">
            <summary>
            Returns true if 'higher' has higher priority than 'lower', false otherwise.
            Note that calling HasHigherPriority(node, node) (ie. both arguments the same node) will return false
            </summary>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.Dequeue">
            <summary>
            Removes the head of the queue (node with minimum priority; ties are broken by order of insertion), and returns it.
            If queue is empty, result is undefined
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.Resize(System.Int32)">
            <summary>
            Resize the queue so it can accept more nodes.  All currently enqueued nodes are remain.
            Attempting to decrease the queue size to a size too small to hold the existing nodes results in undefined behavior
            O(n)
            </summary>
        </member>
        <member name="P:IFramework.Queue.StablePriorityQueue`1.first">
            <summary>
            Returns the head of the queue, without removing it (use Dequeue() for that).
            If the queue is empty, behavior is undefined.
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.UpdatePriority(`0,System.Single)">
            <summary>
            This method must be called on a node every time its priority changes while it is in the queue.  
            <b>Forgetting to call this method will result in a corrupted queue!</b>
            Calling this method on a node not in the queue results in undefined behavior
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.Remove(`0)">
            <summary>
            Removes a node from the queue.  The node does not need to be the head of the queue.  
            If the node is not in the queue, the result is undefined.  If unsure, check Contains() first
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.ResetNode(`0)">
            <summary>
            By default, nodes that have been previously added to one queue cannot be added to another queue.
            If you need to do this, please call originalQueue.ResetNode(node) before attempting to add it in the new queue
            </summary>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Queue.StablePriorityQueueNode">
            <summary>
            稳定优先级队列节点
            </summary>
        </member>
        <member name="P:IFramework.Queue.StablePriorityQueueNode.insertPosition">
            <summary>
            Represents the order the node was inserted in
            </summary>
        </member>
        <member name="T:IFramework.BindableObject">
            <summary>
            绑定对象
            </summary>
        </member>
        <member name="T:IFramework.BindableObject.BindOperation">
            <summary>
            绑定方式
            </summary>
        </member>
        <member name="F:IFramework.BindableObject.BindOperation.Both">
            <summary>
            监听+发布
            </summary>
        </member>
        <member name="F:IFramework.BindableObject.BindOperation.Listen">
            <summary>
            监听
            </summary>
        </member>
        <member name="F:IFramework.BindableObject.bindOperation">
            <summary>
            绑定方式
            </summary>
        </member>
        <member name="M:IFramework.BindableObject.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:IFramework.BindableObject.Subscribe(System.String,System.Action{System.String,System.Object})">
            <summary>
            注册监听
            </summary>
            <param name="propertyName"></param>
            <param name="listener"></param>
        </member>
        <member name="M:IFramework.BindableObject.UnSubscribe(System.String,System.Action{System.String,System.Object})">
            <summary>
            移除监听
            </summary>
            <param name="propertyName"></param>
            <param name="listener"></param>
        </member>
        <member name="M:IFramework.BindableObject.GetProperty``1(``0@,System.String)">
            <summary>
            获取属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BindableObject.SetProperty``1(``0@,``0,System.String)">
            <summary>
            设置属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="value"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:IFramework.BindableObject.OnDispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:IFramework.BindableObjectHandler">
            <summary>
            绑定器
            </summary>
        </member>
        <member name="M:IFramework.BindableObjectHandler.BindProperty``1(System.Action{``0},System.Func{``0},IFramework.BindableObject.BindOperation)">
            <summary>
            绑定
            </summary>
            <typeparam name="T"></typeparam>
            <param name="setter"></param>
            <param name="getter"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BindableObjectHandler.GetValue``1(System.String)">
            <summary>
            获取数值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BindableObjectHandler.GetValue(System.Type,System.String)">
            <summary>
            获取数值
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BindableObjectHandler.PublishProperty(System.Type,System.Object,System.String)">
            <summary>
            发布变化
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BindableObjectHandler.PublishProperty``1(``0,System.String)">
            <summary>
            发布变化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BindableObjectHandler.UnBind">
            <summary>
            解绑全部
            </summary>
        </member>
        <member name="M:IFramework.BindableObjectHandler.UnBind(IFramework.BindableObject)">
            <summary>
            按照对象解绑
            </summary>
            <param name="_object"></param>
        </member>
        <member name="M:IFramework.BindableObjectHandler.UnBind(System.String)">
            <summary>
            按照名字解绑
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:IFramework.BindableObjectHandler.UnBind(IFramework.BindableObject,System.String)">
            <summary>
            解绑
            </summary>
            <param name="_object"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:IFramework.BindableObjectHandler.UnBind(IFramework.BindableObject,System.Type,System.String)">
            <summary>
            解绑
            </summary>
            <param name="_object"></param>
            <param name="type"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:IFramework.BindableObjectHandler.OnDispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:IFramework.ObservableObject">
            <summary>
            可观测 Object
            </summary>
        </member>
        <member name="M:IFramework.ObservableObject.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:IFramework.ObservableObject.Subscribe(System.String,System.Action)">
            <summary>
            注册数值变化监听
            </summary>
            <param name="propertyName"></param>
            <param name="listener"></param>
        </member>
        <member name="M:IFramework.ObservableObject.UnSubscribe(System.String,System.Action)">
            <summary>
            取消注册数值变化监听
            </summary>
            <param name="propertyName"></param>
            <param name="listener"></param>
        </member>
        <member name="M:IFramework.ObservableObject.GetProperty``1(``0@,System.String)">
            <summary>
            获取属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property">获取的属性</param>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ObservableObject.SetProperty``1(``0@,``0,System.String)">
            <summary>
            设置属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property">赋值的变量</param>
            <param name="value">变化的值</param>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="M:IFramework.ObservableObject.PublishPropertyChange(System.String)">
            <summary>
            发布属性发生变化
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="M:IFramework.ObservableObject.OnDispose">
            <summary>
            释放时
            </summary>
        </member>
        <member name="T:IFramework.OnEnvironmentInitAttribute">
            <summary>
            环境初始化时候调用被标记的静态类
            </summary>
        </member>
        <member name="P:IFramework.OnEnvironmentInitAttribute.type">
            <summary>
            配合初始化的版本 0，
            默认初始化，其他自行规定，用于区分环境，
            一般某个环境特有的静态类和环境编号一致
            </summary>
        </member>
        <member name="M:IFramework.OnEnvironmentInitAttribute.#ctor(IFramework.EnvironmentType)">
            <summary>
            Ctor
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:IFramework.ObservableObjectHandler">
            <summary>
            ObservableObject 注册监听Helper
            </summary>
        </member>
        <member name="M:IFramework.ObservableObjectHandler.Subscribe(IFramework.ObservableObject,System.String,System.Action)">
            <summary>
            对一个 ObservableObject 注册一个监听
            </summary>
            <param name="_object"> ObservableObject </param>
            <param name="propertyName">属性名称</param>
            <param name="listenner">回调</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ObservableObjectHandler.BindProperty(System.Action)">
            <summary>
            绑定一个监听
            </summary>
            <param name="setter"> 回调</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ObservableObjectHandler.BindProperty``1(System.Action{``0},System.Func{``0})">
            <summary>
            绑定一个监听
            </summary>
            <typeparam name="T"></typeparam>
            <param name="setter"> 设置值 </param>
            <param name="getter"> 获取值 </param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ObservableObjectHandler.UnSubscribe">
            <summary>
            取消所有监听
            </summary>
        </member>
        <member name="M:IFramework.ObservableObjectHandler.UnSubscribe(IFramework.ObservableObject,System.String)">
            <summary>
            取消符合条件的监听
            </summary>
            <param name="_object"> ObservableObject </param>
            <param name="propertyName"> 属性名称 </param>
        </member>
        <member name="M:IFramework.ObservableObjectHandler.OnDispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:IFramework.ObservableValue`1">
            <summary>
            可观测树值
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:IFramework.ObservableValue`1.ValuePropertyName">
            <summary>
            默认的名字
            </summary>
        </member>
        <member name="P:IFramework.ObservableValue`1.value">
            <summary>
            具体的数值
            </summary>
        </member>
        <member name="M:IFramework.ObservableValue`1.#ctor(`0)">
            <summary>
            Ctor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:IFramework.ObservableValue`1.Subscribe(System.Action)">
            <summary>
            注册 value 变化监听
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:IFramework.ObservableValue`1.UnSubscribe(System.Action)">
            <summary>
            取消注册 value 变化监听
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:IFramework.ObservableValue`1.op_Implicit(IFramework.ObservableValue{`0})~`0">
            <summary>
            方便书写，缩减代码
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:IFramework.BaseTypePool`1">
            <summary>
            统一类型的对象池
            </summary>
            <typeparam name="T">基础类型</typeparam>
        </member>
        <member name="T:IFramework.BaseTypePool`1.BaseTypeInnerPool`1">
            <summary>
            内部池子
            </summary>
            <typeparam name="Object"></typeparam>
        </member>
        <member name="M:IFramework.BaseTypePool`1.BaseTypeInnerPool`1.#ctor(System.Type)">
            <summary>
            ctor
            </summary>
            <param name="objType"></param>
        </member>
        <member name="P:IFramework.BaseTypePool`1.BaseTypeInnerPool`1.type">
            <summary>
            池子内部实际对象类型
            </summary>
        </member>
        <member name="M:IFramework.BaseTypePool`1.BaseTypeInnerPool`1.CreatNew(IFramework.IEventArgs)">
            <summary>
            创建实例
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="F:IFramework.BaseTypePool`1.para">
            <summary>
            自旋锁
            </summary>
        </member>
        <member name="P:IFramework.BaseTypePool`1.Item(System.Type)">
            <summary>
            索引
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BaseTypePool`1.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:IFramework.BaseTypePool`1.SetPool(System.Type,IFramework.BaseTypePool{`0}.BaseTypeInnerPool{`0})">
            <summary>
            设置内部对象池
            </summary>
            <param name="type"></param>
            <param name="pool"></param>
        </member>
        <member name="M:IFramework.BaseTypePool`1.GetPool(System.Type)">
            <summary>
            获取内部对象池
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BaseTypePool`1.Get(System.Type,IFramework.IEventArgs)">
            <summary>
            获取数据
            </summary>
            <param name="type"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BaseTypePool`1.Get``1(IFramework.IEventArgs)">
            <summary>
            获取数据
            </summary>
            <typeparam name="Object"></typeparam>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BaseTypePool`1.Set(System.Type,`0,IFramework.IEventArgs)">
            <summary>
            回收数据
            </summary>
            <param name="type"></param>
            <param name="t"></param>
            <param name="arg"></param>
        </member>
        <member name="M:IFramework.BaseTypePool`1.Set``1(``0,IFramework.IEventArgs)">
            <summary>
            回收数据
            </summary>
            <typeparam name="Object"></typeparam>
            <param name="t"></param>
            <param name="arg"></param>
        </member>
        <member name="M:IFramework.BaseTypePool`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:IFramework.BaseTypePool`1.OnDispose">
            <summary>
            释放时
            </summary>
        </member>
        <member name="T:IFramework.CapicityPool`1">
            <summary>
            有容量的对象池
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.CapicityPool`1.capcity">
            <summary>
            存储容量
            </summary>
        </member>
        <member name="M:IFramework.CapicityPool`1.#ctor(System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="capcity"></param>
        </member>
        <member name="M:IFramework.CapicityPool`1.OnSet(`0,IFramework.IEventArgs)">
            <summary>
            回收，当数量超过回收失败
            </summary>
            <param name="t"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.RecyclableObject">
            <summary>
            可回收类
            </summary>
        </member>
        <member name="M:IFramework.RecyclableObject.Allocate(System.Type,IFramework.EnvironmentType)">
            <summary>
            分配一个实例
            </summary>
            <param name="type">类型</param>
            <param name=" envType"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.RecyclableObject.Allocate(System.Type,IFramework.IEnvironment)">
            <summary>
            分配一个实例
            </summary>
            <param name="type"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.RecyclableObject.Allocate``1(IFramework.EnvironmentType)">
            <summary>
            分配一个实例
            </summary>
            <typeparam name="T"> RecyclableObject </typeparam>
            <param name=" envType"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.RecyclableObject.Allocate``1(IFramework.IEnvironment)">
            <summary>
            分配一个实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.RecyclableObject.RecyleByGuid(IFramework.IEnvironment,System.Guid)">
            <summary>
            通过唯一id回收对象
            </summary>
            <param name="env"></param>
            <param name="guid"></param>
        </member>
        <member name="M:IFramework.RecyclableObject.RecyleAll(IFramework.IEnvironment)">
            <summary>
            回收所有实例
            </summary>
            <param name="env"></param>
        </member>
        <member name="M:IFramework.RecyclableObject.GetFromMemory(IFramework.IEnvironment,System.Guid,IFramework.RecyclableObject@)">
            <summary>
            获取没有回收的实例
            </summary>
            <param name="env"></param>
            <param name="id"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.RecyclableObject.RecyleByGuid(IFramework.EnvironmentType,System.Guid)">
            <summary>
            通过唯一id回收对象
            </summary>
            <param name="envType"></param>
            <param name="guid"></param>
        </member>
        <member name="M:IFramework.RecyclableObject.RecyleAll(IFramework.EnvironmentType)">
            <summary>
            回收所有实例
            </summary>
            <param name="envType"></param>
        </member>
        <member name="M:IFramework.RecyclableObject.GetFromMemory(IFramework.EnvironmentType,System.Guid,IFramework.RecyclableObject@)">
            <summary>
            获取没有回收的实例
            </summary>
            <param name="envType"></param>
            <param name="id"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:IFramework.RecyclableObject.recyled">
            <summary>
            是否被回收
            </summary>
        </member>
        <member name="P:IFramework.RecyclableObject.dataDirty">
            <summary>
            数据是否发生改变
            </summary>
        </member>
        <member name="P:IFramework.RecyclableObject.env">
            <summary>
            当前所处环境
            </summary>
        </member>
        <member name="P:IFramework.RecyclableObject.guid">
            <summary>
            唯一 id
            </summary>
        </member>
        <member name="M:IFramework.RecyclableObject.Recyle">
            <summary>
            回收
            </summary>
        </member>
        <member name="M:IFramework.RecyclableObject.ResetData">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="M:IFramework.RecyclableObject.SetDataDirty">
            <summary>
            设置数据发生改动
            </summary>
        </member>
        <member name="M:IFramework.RecyclableObject.OnAllocate">
            <summary>
            被分配时
            </summary>
        </member>
        <member name="M:IFramework.RecyclableObject.OnRecyle">
            <summary>
            被回收时
            </summary>
        </member>
        <member name="M:IFramework.RecyclableObject.OnDataReset">
            <summary>
            数据重置时
            </summary>
        </member>
        <member name="M:IFramework.RecyclableObject.OnDispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:IFramework.Framework">
            <summary>
            框架入口
            </summary>
        </member>
        <member name="M:IFramework.Framework.CreateEnv(IFramework.EnvironmentType)">
            <summary>
            实例化环境
            </summary>
            <param name=" envType">环境类型</param>
            <returns>环境</returns>
        </member>
        <member name="M:IFramework.Framework.GetEnv(IFramework.EnvironmentType)">
            <summary>
            根据序号获取环境
            </summary>
            <param name=" envType">环境类型</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Framework.BindEnvUpdate(System.Action,IFramework.IEnvironment)">
            <summary>
            绑顶 方法 到一个环境的 Update
            </summary>
            <param name="action">方法</param>
            <param name="env">环境</param>
        </member>
        <member name="M:IFramework.Framework.UnBindEnvUpdate(System.Action,IFramework.IEnvironment)">
            <summary>
            解除绑顶 方法 到一个环境的 Update
            </summary>
            <param name="action">方法</param>
            <param name="env">环境</param>
        </member>
        <member name="M:IFramework.Framework.BindEnvDispose(System.Action,IFramework.IEnvironment)">
            <summary>
            绑顶 方法 到一个环境的 Dispose
            </summary>
            <param name="action">方法</param>
            <param name="env">环境</param>
        </member>
        <member name="M:IFramework.Framework.UnBindEnvDispose(System.Action,IFramework.IEnvironment)">
            <summary>
            解除绑顶 方法 到一个环境的 Dispose
            </summary>
            <param name="action">方法</param>
            <param name="env">环境</param>
        </member>
        <member name="M:IFramework.Framework.BindEnvUpdate(System.Action,IFramework.EnvironmentType)">
            <summary>
            绑顶 方法 到一个环境的 Update
            </summary>
            <param name="action">方法</param>
            <param name=" envType"></param>
        </member>
        <member name="M:IFramework.Framework.UnBindEnvUpdate(System.Action,IFramework.EnvironmentType)">
            <summary>
            解除绑顶 方法 到一个环境的 Update
            </summary>
            <param name="action">方法</param>
            <param name=" envType"></param>
        </member>
        <member name="M:IFramework.Framework.BindEnvDispose(System.Action,IFramework.EnvironmentType)">
            <summary>
            绑顶 方法 到一个环境的 Dispose
            </summary>
            <param name="action">方法</param>
            <param name=" envType"></param>
        </member>
        <member name="M:IFramework.Framework.UnBindEnvDispose(System.Action,IFramework.EnvironmentType)">
            <summary>
            解除绑顶 方法 到一个环境的 Dispose
            </summary>
            <param name="action">方法</param>
            <param name=" envType"></param>
        </member>
        <member name="T:IFramework.IEventArgs">
            <summary>
            框架内传递的所有消息的基类
            </summary>
        </member>
        <member name="T:IFramework.LockWait">
            <summary>
            自旋锁
            </summary>
        </member>
        <member name="M:IFramework.LockWait.#ctor(IFramework.LockParam@)">
            <summary>
            Ctor
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:IFramework.LockWait.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:IFramework.LockParam">
            <summary>
            自旋锁信号
            </summary>
        </member>
        <member name="T:IFramework.ObjectPool`1">
            <summary>
            基础对象池
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.ObjectPool`1.pool">
            <summary>
            数据容器
            </summary>
        </member>
        <member name="F:IFramework.ObjectPool`1.lockParam">
            <summary>
            自旋锁
            </summary>
        </member>
        <member name="P:IFramework.ObjectPool`1.type">
            <summary>
            存储数据类型
            </summary>
        </member>
        <member name="P:IFramework.ObjectPool`1.count">
            <summary>
            池子数量
            </summary>
        </member>
        <member name="M:IFramework.ObjectPool`1.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:IFramework.ObjectPool`1.OnDispose">
            <summary>
            释放时
            </summary>
        </member>
        <member name="M:IFramework.ObjectPool`1.Get(IFramework.IEventArgs)">
            <summary>
            获取
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ObjectPool`1.Set(`0,IFramework.IEventArgs)">
            <summary>
            回收
            </summary>
            <param name="t"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ObjectPool`1.Clear(IFramework.IEventArgs)">
            <summary>
            清除
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:IFramework.ObjectPool`1.Clear(System.Int32,IFramework.IEventArgs)">
            <summary>
            清除
            </summary>
            <param name="count"></param>
            <param name="arg"></param>
        </member>
        <member name="M:IFramework.ObjectPool`1.CreatNew(IFramework.IEventArgs)">
            <summary>
            创建一个新对象
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ObjectPool`1.OnClear(`0,IFramework.IEventArgs)">
            <summary>
            数据被清除时
            </summary>
            <param name="t"></param>
            <param name="arg"></param>
        </member>
        <member name="M:IFramework.ObjectPool`1.OnSet(`0,IFramework.IEventArgs)">
            <summary>
            数据被回收时，返回true可以回收
            </summary>
            <param name="t"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ObjectPool`1.OnGet(`0,IFramework.IEventArgs)">
            <summary>
            数据被获取时
            </summary>
            <param name="t"></param>
            <param name="arg"></param>
        </member>
        <member name="M:IFramework.ObjectPool`1.OnCreate(`0,IFramework.IEventArgs)">
            <summary>
            数据被创建时
            </summary>
            <param name="t"></param>
            <param name="arg"></param>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataColumn">
            <summary>
            每一个格子
            </summary>
        </member>
        <member name="F:IFramework.Serialization.DataTable.DataColumn.headLineName">
            <summary>
            标题名称
            </summary>
        </member>
        <member name="F:IFramework.Serialization.DataTable.DataColumn.strValue">
            <summary>
            string 数据
            </summary>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataColumnIndexAttribute">
            <summary>
            数据列
            </summary>
        </member>
        <member name="P:IFramework.Serialization.DataTable.DataColumnIndexAttribute.index">
            <summary>
            所在列
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataColumnIndexAttribute.#ctor(System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataColumnNameAttribute">
            <summary>
            设置数据表标题
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataColumnNameAttribute.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="P:IFramework.Serialization.DataTable.DataColumnNameAttribute.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataIgnoreAttribute">
            <summary>
            数据表忽略的成员
            </summary>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataTableTool">
            <summary>
            DataTable
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataTableTool.CreateReader(System.IO.TextReader,IFramework.Serialization.DataTable.IDataRow,IFramework.Serialization.DataTable.IDataExplainer)">
            <summary>
            创建数据读取器
            </summary>
            <param name="streamReader"></param>
            <param name="rowReader"></param>
            <param name="explainer"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataTableTool.CreateReader(System.String,IFramework.Serialization.DataTable.IDataRow,IFramework.Serialization.DataTable.IDataExplainer)">
            <summary>
            创建数据读取器
            </summary>
            <param name="text"></param>
            <param name="rowReader"></param>
            <param name="explainer"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataTableTool.CreateWriter(System.IO.TextWriter,IFramework.Serialization.DataTable.IDataRow,IFramework.Serialization.DataTable.IDataExplainer)">
            <summary>
            创建数据写入器
            </summary>
            <param name="streamWriter"></param>
            <param name="rowWriter"></param>
            <param name="explainer"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataExplainer">
            <summary>
            string 解释器
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataExplainer.#ctor(System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="dot">替换逗号的字符</param>
            <param name="quotes">替换双引号的字符</param>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataExplainer.CreatInstance``1">
            <summary>
            创建实例
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataExplainer.CreatInstance``1(System.Collections.Generic.List{IFramework.Serialization.DataTable.DataColumn},System.Collections.Generic.Dictionary{System.Reflection.MemberInfo,System.String})">
            <summary>
            根据格子反序列化一个实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cols"></param>
            <param name="membersDic">需要反序列化的成员</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataExplainer.GetColumns``1(``0,System.Collections.Generic.Dictionary{System.Reflection.MemberInfo,System.String})">
            <summary>
            根据 具体类型 获取单个数据格子数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="membersDic">需要序列化的成员</param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataReader">
            <summary>
            数据表读者
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataReader.#ctor(System.IO.TextReader,IFramework.Serialization.DataTable.IDataRow,IFramework.Serialization.DataTable.IDataExplainer)">
            <summary>
            Ctor
            </summary>
            <param name="streamReader">流读者</param>
            <param name="rowReader">行读者</param>
            <param name="explainer">数据解释器</param>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataReader.#ctor(System.String,IFramework.Serialization.DataTable.IDataRow,IFramework.Serialization.DataTable.IDataExplainer)">
            <summary>
            Ctor
            </summary>
            <param name="text">数据表字符串</param>
            <param name="rowReader">行读者</param>
            <param name="explainer">数据解释器</param>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataReader.OnDispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataReader.Get``1">
            <summary>
            获取一张表数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataRow">
            <summary>
            数据行
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataRow.ReadLine(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            读取一行
            </summary>
            <param name="val">行String</param>
            <param name="headNames">标题行</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataRow.SpilitRow(System.String)">
            <summary>
            切割一行
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataRow.ReadHeadLine(System.String)">
            <summary>
            读取标题行
            </summary>
            <param name="val">行String</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataRow.WriteLine(System.Collections.Generic.List{IFramework.Serialization.DataTable.DataColumn})">
            <summary>
            写入一行
            </summary>
            <param name="cols">写入的信息</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataRow.WriteHeadLine(System.Collections.Generic.List{System.String})">
            <summary>
            写入标题行
            </summary>
            <param name="headNames">写入的标题</param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataWriter">
            <summary>
            数据写入者
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataWriter.#ctor(System.IO.TextWriter,IFramework.Serialization.DataTable.IDataRow,IFramework.Serialization.DataTable.IDataExplainer)">
            <summary>
            Ctor
            </summary>
            <param name="streamWriter">流写者</param>
            <param name="rowWriter">行写者</param>
            <param name="explainer">数据解释器</param>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataWriter.#ctor(IFramework.Serialization.DataTable.IDataRow,IFramework.Serialization.DataTable.IDataExplainer)">
            <summary>
            Ctor
            </summary>
            <param name="rowWriter">行写者</param>
            <param name="explainer">数据解释器</param>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataWriter.OnDispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataWriter.WriteString``1(System.Collections.Generic.List{``0})">
            <summary>
            写入到string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">数据</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataWriter.Write``1(System.Collections.Generic.List{``0})">
            <summary>
            写入一个表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
        </member>
        <member name="T:IFramework.Serialization.DataTable.IDataExplainer">
            <summary>
            string 解释器
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataExplainer.CreatInstance``1(System.Collections.Generic.List{IFramework.Serialization.DataTable.DataColumn},System.Collections.Generic.Dictionary{System.Reflection.MemberInfo,System.String})">
            <summary>
            根据格子反序列化一个实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cols"></param>
            <param name="membersDic">需要反序列化的成员</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataExplainer.GetColumns``1(``0,System.Collections.Generic.Dictionary{System.Reflection.MemberInfo,System.String})">
            <summary>
            根据 具体类型 获取单个数据格子数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="membersDic">需要序列化的成员</param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Serialization.DataTable.IDataReader">
            <summary>
            数据读取器
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataReader.Get``1">
            <summary>
            获取
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:IFramework.Serialization.DataTable.IDataRow">
            <summary>
            数据行
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataRow.ReadLine(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            读取一行
            </summary>
            <param name="val">行String</param>
            <param name="headNames">标题行</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataRow.ReadHeadLine(System.String)">
            <summary>
            读取标题行
            </summary>
            <param name="val">行String</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataRow.WriteLine(System.Collections.Generic.List{IFramework.Serialization.DataTable.DataColumn})">
            <summary>
            写入一行
            </summary>
            <param name="cols">写入的信息</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataRow.WriteHeadLine(System.Collections.Generic.List{System.String})">
            <summary>
            写入标题行
            </summary>
            <param name="headNames">写入的标题</param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Serialization.DataTable.IDataWriter">
            <summary>
            数据写入器
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataWriter.Write``1(System.Collections.Generic.List{``0})">
            <summary>
            写入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataWriter.WriteString``1(System.Collections.Generic.List{``0})">
            <summary>
            写入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Singleton.ISingleton">
            <summary>
            单例
            </summary>
        </member>
        <member name="M:IFramework.Singleton.ISingleton.OnSingletonInit">
            <summary>
            单例初始化
            </summary>
        </member>
        <member name="T:IFramework.Singleton.Singleton`1">
            <summary>
            单例基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.Singleton.Singleton`1.instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="M:IFramework.Singleton.Singleton`1.#ctor">
            <summary>
            ctror
            </summary>
        </member>
        <member name="M:IFramework.Singleton.Singleton`1.OnSingletonInit">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:IFramework.Singleton.Singleton`1.Dispose">
            <summary>
            注销
            </summary>
        </member>
        <member name="T:IFramework.Singleton.SingletonCollection">
            <summary>
            单例合集
            </summary>
        </member>
        <member name="M:IFramework.Singleton.SingletonCollection.Set``1(``0)">
            <summary>
            注入单例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="singleton"></param>
        </member>
        <member name="M:IFramework.Singleton.SingletonCollection.Dispose``1">
            <summary>
            注销一个单例
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IFramework.Singleton.SingletonCollection.Dispose">
            <summary>
            注销所有单例
            </summary>
        </member>
        <member name="T:IFramework.Singleton.SingletonProperty`1">
            <summary>
            单例属性
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.Singleton.SingletonProperty`1.instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="M:IFramework.Singleton.SingletonProperty`1.Dispose">
            <summary>
            注销
            </summary>
        </member>
        <member name="T:IFramework.Singleton.SingletonPropertyClass`1">
            <summary>
            单例属性类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.Singleton.SingletonPropertyClass`1.instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="M:IFramework.Singleton.SingletonPropertyClass`1.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:IFramework.Singleton.SingletonPropertyClass`1.OnSingletonInit">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:IFramework.Singleton.SingletonPropertyClass`1.Dispose">
            <summary>
            注销
            </summary>
        </member>
        <member name="T:IFramework.ValueMap">
            <summary>
            数据存储器   类型,名字,实例
            </summary>
        </member>
        <member name="M:IFramework.ValueMap.Exist``1(System.String)">
            <summary>
            是否存在对应名字类型的实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ValueMap.Exist(System.Type,System.String)">
            <summary>
            是否存在对应名字类型的实例
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ValueMap.Get``1(System.String,System.Boolean)">
            <summary>
            获取对应名字类型的实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="autoCreate"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ValueMap.Set``1(System.String,``0)">
            <summary>
            设置对应名字类型的实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="t"></param>
        </member>
        <member name="M:IFramework.ValueMap.Get(System.Type,System.String,System.Boolean)">
            <summary>
            获取对应名字类型的实例
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="autoCreate"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ValueMap.Set(System.Type,System.String,System.Object)">
            <summary>
            设置对应名字类型的实例
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="t"></param>
        </member>
        <member name="M:IFramework.ValueMap.GetFirst(System.String)">
            <summary>
            获取第一个名字对应的实例
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ValueMap.Clear">
            <summary>
            清除
            </summary>
        </member>
    </members>
</doc>
